# import time
#
# from selenium import webdriver
# from selenium.webdriver.chrome.service import Service as ChromeService
# from webdriver_manager.chrome import ChromeDriverManager
#
#
# with webdriver.Chrome(service=ChromeService(ChromeDriverManager().install())) as driver:
#     driver.get("https://stepik.org/course/104774")
#     time.sleep(5)
# import time
#
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# url = 'http://parsinger.ru/selenium/3/3.html'
# with webdriver.Chrome() as browser:
#     browser.get(url)
#     time.sleep(5)
#     elem = browser.find_element(By.CLASS_NAME, 'text')
#     print(elem)

# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера в блоке with для автоматического закрытия
# with webdriver.Chrome() as driver:
#     # Открытие веб-страницы
#     driver.get("http://some-news-website.com")
#
#     # Ищем все блоки новостей
#     news_blocks = driver.find_elements(By.CLASS_NAME, 'news-block')
#
#     # Проходимся по каждому блоку
#     for block in news_blocks:
#         # В каждом блоке ищем заголовок
#         title_element = block.find_element(By.CLASS_NAME, 'title')
#
#         # Допустим, выводим текст каждого заголовка
#         print("Заголовок новости:", title_element.text)

# Браузер закроется автоматически после выхода из блока with

# import time
# # from pydoc import browse
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/1/1.html')
#     input_form = browser.find_elements(By.TAG_NAME, 'input')
#     for i in input_form:
#         if i.get_attribute('type') != 'submit':
#             i.send_keys('Text')
#     time.sleep(5)
#     # button = browser.find_element(By.XPATH, '//submit').click()
#     button = browser.find_element_by_id(By.TAG_NAME, "btn")
#     button.click()
#     time.sleep(5)
#     # element = browser.find_element(By.ID,'btn')
#     # element.click()
#     result_text = browser.find_element(By.ID, 'result').text
#     print(result_text)
#     time.sleep(5)
#     # time.sleep(5)
#     # time.sleep(5)
#     browser.quit()


# from selenium import webdriver
# from selenium.webdriver.common.by import By
# import time
#
# # Инициализация драйвера Chrome
# browser = webdriver.Chrome()
#
# # Переход по URL
# url = "https://parsinger.ru/selenium/1/1.html"
# browser.get(url)
#
# # Поиск всех элементов формы
# input_fields = browser.find_elements(By.TAG_NAME, "input")
#
# # Заполнение полей данными
# for field in input_fields:
#     if field.get_attribute("type") != "submit":
#         field.send_keys("Текст")
# time.sleep(3)
# # Нажимаем кнопку
# # button = browser.find_element(By.XPATH, "//button")
# button = browser.find_element(By.ID, "btn")
# # time.sleep(10)
# # button.click()
#
# # Ждём три секунды для загрузки результата
# time.sleep(3)
#
# # Получение текста рядом с кнопкой
# result_text = browser.find_element(By.ID, "result").text
# # time.sleep(10)
# print(result_text)
# # time.sleep(10)
# # Закрываем браузер
# browser.quit()



# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/selenium/2/2.html')
#     element = browser.find_element(By.PARTIAL_LINK_TEXT, "16243162441624")
#     element.click()
#     result_text = browser.find_element(By.ID, 'result').text
#     print('Результат:', result_text)
#     browser.quit()


# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Шаг 1: Открытие браузера (например, Chrome)
# driver = webdriver.Chrome()
#
# # Шаг 2: Переход на нужный сайт
# url = "http://parsinger.ru/selenium/2/2.html"  # Замените на URL вашего сайта
# driver.get(url)
#
# # Шаг 3: Поиск ссылки по частичному тексту
# link_text = "16243162441624"
# element = driver.find_element(By.PARTIAL_LINK_TEXT, link_text)
#
# # Шаг 4: Клик по ссылке
# element.click()
#
# # Шаг 5: Получение результата из тега <p> с id="result"
# result_element = driver.find_element(By.ID, "result")
# result_text = result_element.text
#
# # Шаг 6: Фиксация результата
# print("Результат:", result_text)  # Или сохраняем в переменной для дальнейшего использования
#
# # Закрываем браузер после выполнения всех шагов
# driver.quit()

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/selenium/3/3.html')
#     dannue = browser.find_elements(By.TAG_NAME,'p')
#     count = 0
#     for i in dannue:
#         number = int(i.text)
#         count += number
#         print(count)
#     time.sleep(10)
#     browser.quit()
# 450384194300

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация дварайвера Chrome
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/selenium/3/3.html')
#     dannye = browser.find_elements(By.CLASS_NAME, 'text')
#     count = 0
#     for i, div in enumerate(dannye):
#         number = div.find_element(By.XPATH, './p[2]').text
#         count += int(number)
#         print(count)
#     time.sleep(2)
#     browser.quit()
# 191817
# 121314
# 151715

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
# with webdriver.Chrome() as browser:
#     # browser.get('http://parsinger.ru/selenium/4/4.html')
#     buttons = browser.find_elements(By.TAG_NAME, 'input')
#     for button in buttons:
#         button.click()
#     number = browser.find_element(By.ID, 'result').text
#     print('Результат:', number)
#     time.sleep(10)
#     browser.quit()

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# numbers = [1, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 16, 17, 22, 23, 28, 29, 33, 34, 38,
# 39, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 68, 69, 73,
# 74, 78, 79, 83, 84, 88, 89, 91, 92, 97, 98, 101, 104, 108, 109, 113, 114, 118,
# 119, 123, 124, 128, 129, 131, 132, 137, 138, 140, 141, 144, 145, 148, 149, 153,
# 154, 158, 159, 163, 164, 165, 168, 169, 171, 172, 177, 178, 180, 181, 184, 185,
# 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 204, 205, 206, 207,
# 208, 209, 211, 212, 217, 218, 220, 221, 224, 225, 227, 228, 229, 230, 232, 233,
# 234, 235, 237, 238, 239, 240, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255,
# 256, 257, 258, 260, 261, 264, 265, 268, 269, 273, 274, 278, 279, 288, 289, 291,
# 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 308, 309, 313, 314,
# 318, 319, 328, 329, 331, 332, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349,
# 353, 354, 358, 359, 368, 369, 371, 372, 379, 380, 385, 386, 408, 409, 411, 412,
# 419, 420, 425, 426, 428, 429, 433, 434, 438, 439, 444, 445, 446, 447, 448, 451,
# 452, 459, 460, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479,
# 480, 485, 486, 487, 488, 491, 492, 499, 500, 505, 506, 508, 509, 513, 514, 518, 519]
#
# # Инициализация драйвера Chrome
# with (webdriver.Chrome() as browser):
#     browser.get('http://parsinger.ru/selenium/5/5.html')
#     buttoms = browser.find_elements(By.TAG_NAME, 'input')
#     checkbox = browser.find_elements(By.CLASS_NAME, 'check')
#     for i in buttoms:
#         m = i.get_attribute('value')
#         if m.isdigit() and int(m) in numbers:
#             i.click()
#     time.sleep(3)
#     number = browser.find_element(By.ID, 'result').text
#     # time.sleep(3)
#     print('Результат:', number)
#     browser.quit()


# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import Select
# # Инициализация драйвера Chrome
# driver = webdriver.Chrome()
# driver.get('http://parsinger.ru/selenium/7/7.html')
#
# # Ждем загрузки страницы
# WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'select')))
#
# # Находим выпадающий список
# dropdown = driver.find_element(By.TAG_NAME, 'select')
#
# # Создаем объект Select для работы с выпадающим списком
# select = Select(dropdown)
#
# # Получаем все опции выпадающего списка
# options = select.options
#
# # Суммируем значения всех опций
# sum_values = sum(int(option.text) for option in options)
# buttoms = driver.find_element(By.TAG_NAME, 'input')
# buttoms.send_keys(str(sum_values))
# time.sleep(3)
# element = driver.find_element(By.ID,'sendbutton')
# element.click()
# number = driver.find_element(By.ID, 'result').text
# time.sleep(3)
# # Выводим сумму
# print(sum_values)
# print(number)
# # Закрываем браузер
# driver.quit()
# 4194183965770
# 321687416587463168743416874641687

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import Select
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/selenium/6/6.html')
#     dropdown = browser.find_element(By.TAG_NAME, 'select')
#     select = Select(dropdown)
#     options = select.options
#     number = ((12434107696 * 3) * 2) + 1  # 74604646177
#     option_to_select = None
#     for option in select.options:
#         if int(option.text) == number:
#             option_to_select = option
#             break
#     if option_to_select is not None:
#         # Выбор найденной опции
#         select.select_by_visible_text(option_to_select.text)
#
#         # Нажатие на кнопку Отправить
#         send_button = browser.find_element(By.ID, 'sendbutton')
#         send_button.click()
#     rez = browser.find_element(By.ID, 'result').text
#     print(rez)
#     time.sleep(5)
#     browser.quit()
# 98763216843164361841357461685743168461

# import time
# from selenium import webdriver
#
# options_chrome = webdriver.ChromeOptions()
# options_chrome.add_extension('coordinates.crx')
#
# with webdriver.Chrome(options=options_chrome) as browser:
#     url = 'https://stepik.org/course/104774'
#     browser.get(url)
#     time.sleep(15)

# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Создание объекта ChromeOptions для дополнительных настроек браузера
# options_chrome = webdriver.ChromeOptions()
#
# # Добавление аргумента '--headless' для запуска браузера в фоновом режиме
# options_chrome.add_argument('--headless')
#
# # Инициализация драйвера Chrome с указанными опциями
# # Использование менеджера контекста 'with' для автоматического закрытия браузера после выполнения кода
# with webdriver.Chrome(options=options_chrome) as browser:
#     url = 'https://stepik.org/course/104774'
#     browser.get(url)
#
#     # Ищем элемент по тегу 'a' (ссылку)
#     a = browser.find_element(By.TAG_NAME, 'a')
#
#     # Выводим атрибут 'href' найденного элемента (URL ссылки)
#     print(a.get_attribute('href'))


# import time
# from selenium import webdriver
#
# # Задаем опции для Chrome
# options_chrome = webdriver.ChromeOptions()
# # Указываем путь к профилю пользователя
# options_chrome.add_argument('user-data-dir=C:\\Users\\s.vetrov\\AppData\\Local\\Google\\Chrome\\')
# # C:\Users\s.vetrov\AppData\Local\Google\Chrome\User
# # Инициализируем драйвер с указанными опциями
# with webdriver.Chrome(options=options_chrome) as browser:
#     url = 'https://www.google.com'
#     browser.get(url)  # Открываем страницу
#     time.sleep(10)  # Даем время на загрузку страницы

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/methods/1/index.html')
#
#     # Запуск цикла while и обновление браузера до тех пор пока не появится элемент
#     while True:
#         browser.refresh()
#         value = browser.find_element(By.ID, 'result').text
#
#         # Если элемент является числом вывод его в терминал и остановка цикла
#         if value.isdigit():
#             print(f'Найден элемент: {value}')
#             break
#
#         # Если элемент не найден пишем что обновляем страницу и ожидание в одну секунду
#         else:
#             print('Элементов нет, обновляю страницу...')
#             time.sleep(1)
#
#     browser.quit()


# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     # Переходим по ссылке
#     browser.get('https://parsinger.ru/selenium/5.5/1/1.html')
#     # Находим текстовое поле
#     window = browser.find_elements(By.TAG_NAME, "input")
#     # Проходимся по всем текстовым полям и удаляем их содержимое
#     for wind in window:
#         wind.clear()
#     # Находим нажимаем на кнопку "Проверить"
#     push = browser.find_element(By.ID, 'checkButton')
#     push.click()
#     # Переключаемся на алерт и получаем его текст
#     alert = browser.switch_to.alert.text
#     print(alert)

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/methods/3/index.html')
#     # time.sleep(50)
#     cookies = browser.get_cookies()
#     # selected_values = [int(x['value']) for x in cookies if int(x['name'].rsplit("_")[-1]) % 2 == 0]
#     total_sum = 0
#     for cookie in cookies:
#         name = int(cookie['name'].rsplit('_')[-1])
#         if name % 2 == 0:
#             total_sum += int(cookie['value'])
#     # numbers = sum(int(i) for i in lst)
#     # print(numbers)
#     # total_sum = 0
#     # for i in lst:
#     #     total_sum += int(i)
#     print(total_sum)
    # print(cookies['name'])

# lst = ['5700', '27000', '45500', '20482', '117150', '61105', '1545300', '92872', '46992']
#
# numbers = [i for i in lst]
# print(numbers)

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализируем драйвер Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.5/2/1.html')
#     elements = browser.find_elements(By.TAG_NAME, 'input')
#     for element in elements:
#         if not element.get_attribute('disabled'):
#             element.clear()
#     push = browser.find_element(By.ID, 'checkButton')
#     push.click()
#     alert = browser.switch_to.alert.text
#     print(alert)

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/methods/5/index.html')
#     time.sleep(70)
#     elements = browser.find_elements(By.TAG_NAME, 'a')
#     lst = []
#     max_expiry_element = 0
#     max_expiry_link = 0
#     for i in elements:
#         lst.append(i.get_attribute('href'))
#     for h in lst:
#         browser.get(h)
#         cookies = browser.get_cookies()
#         for j in cookies:
#             if 'expiry' in j:
#                 expiry_element = j['expiry']
#                 if expiry_element > max_expiry_element:
#                     max_expiry_element = expiry_element
#                     max_expiry_link = h
#
#                     element = browser.find_element(By.ID, 'result').text
#     print(element)


# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with (webdriver.Chrome() as browser):
#     browser.get('http://parsinger.ru/scroll/4/index.html')
#     buttoms = browser.find_elements(By.CLASS_NAME, 'btn')
#     count = 0
#     for i in buttoms:
#         browser.execute_script('return arguments[0].scrollIntoView(true);', i)
#         i.click()
#         element = browser.find_element(By.ID, 'result').text
#         count += int(element)
#     print(count)

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.5/3/1.html')
#     elements = browser.find_elements(By.TAG_NAME, 'textarea')
#     check_box = browser.find_elements(By.CLASS_NAME, 'checkbox')
#     count = 0
#     for elem, checkbox in zip(elements, check_box):
#         if checkbox.is_selected():
#             count += int(elem.get_attribute('value'))
#     print(count)

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.5/4/1.html')
#     buttons = browser.find_elements(By.CSS_SELECTOR, 'button')
#     elements = browser.find_elements(By.TAG_NAME, 'textarea')
#     lst = []
#     for grey in elements:
#         value = grey.get_attribute('value')
#         lst.append(value)
#         grey.clear()
#
#     filtered_lst = list(filter(None, lst))
#
#     # Нахождение всех синих полей
#     blues = browser.find_elements(By.CSS_SELECTOR, 'textarea[color="blue"]')
#
#     # Вставка значений из списка в синие поля
#     for blue, value in zip(blues, filtered_lst):
#         blue.send_keys(value)
#
#     # time.sleep(50)
#     for i in buttons:
#         i.click()
#
#     check_all = browser.find_element(By.ID, 'checkAll')
#     check_all.click()
#     secret_element = browser.find_element(By.ID, 'congrats').text
#     print('Результат Секретного кода: ', secret_element)

# from selenium import webdriver
#
# url = 'https://parsinger.ru/selenium/5.5/4/1.html'
# driver = webdriver.Chrome()
# driver.get(url)
# gray = driver.find_elements('xpath', '//textarea[@color="gray"]')
# blue = driver.find_elements('xpath', '//textarea[@color="blue"]')
# buttons = driver.find_elements('xpath', '//button')
# for g, b, but in zip(gray, blue, buttons):
#     text = g.text
#     g.clear()
#     b.send_keys(text)
#     but.click()
# driver.find_element('xpath', '//button[@id="checkAll"]').click()
# print(driver.find_element('xpath','//p[@id="congrats"]').text)

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import Select
# # from selenium.webdriver.support import expected_conditions as EC
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     # browser.get('https://parsinger.ru/selenium/5.5/5/1.html') # Основная страница
#     browser.get('https://parsinger.ru/selenium/5.5/5/test/test.html') # Страница с двумя элементами для тренировки
#     # time.sleep(60)
#     element = browser.find_element(By.CSS_SELECTOR, 'span').text
#     elements = browser.find_elements(By.TAG_NAME, 'span')
#     dropdown = browser.find_element(By.TAG_NAME, 'select')
#     select = Select(dropdown)
#     option = select.options
#     # print(elements)
#     # lst = []
#     for i in elements:
#         if element == i:
#             select.select_by_visible_text(str(i))
#
#     #     lst.append(i.text)
#     # print(lst)
#     time.sleep(60)
#     if int(option.text) == number:
# #             option_to_select = option

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import Select
# import time
#
# # 1. Загружаем страницу
# url = 'https://parsinger.ru/selenium/5.5/5/1.html'
# driver = webdriver.Chrome()
# driver.get(url)
# time.sleep(2)  # Даем время загрузиться странице
#
# # 2. Находим все контейнеры
# containers = driver.find_elements(By.CSS_SELECTOR, '.task')
#
# for container in containers:
#     # 3. Получаем цвет родительского контейнера
#     hex_color = container.find_element(By.TAG_NAME, 'span').get_attribute('style')[-6:]
#
#     # 4. Выбираем цвет в выпадающем списке
#     select = Select(container.find_element(By.TAG_NAME, 'select'))
#     select.select_by_value(hex_color)
#
#     # 5. Нажимаем на кнопку с нужным атрибутом data-hex
#     button = container.find_element(By.XPATH, f".//button[@data-hex='{hex_color}']")
#     button.click()
#
#     # 6. Ставим галочку в чекбоксе
#     checkbox = container.find_element(By.NAME, 'checkbox')
#     if not checkbox.is_selected():
#         checkbox.click()
#
#     # 7. Заполняем текстовое поле тем же цветом
#     text_field = container.find_element(By.NAME, 'text')
#     text_field.clear()  # Очищаем поле перед вводом
#     text_field.send_keys(hex_color)
#
#     # 8. Нажимаем на кнопку "Проверить"
#     check_button = container.find_element(By.CLASS_NAME, 'check')
#     check_button.click()
#     time.sleep(0.5)  # Ждем немного после проверки
#
# # 9. Нажимаем на кнопку "Проверить все элементы"
# final_check_button = driver.find_element(By.ID, 'check_all')
# final_check_button.click()

# 10. Получаем секретный код из алерта
# alert = driver.switch_to.alert
# secret_code = alert.text
# print("Секретный код:", secret_code)
# alert.accept()
#
# # 11. Вставляем код в поле ответа
# answer_input = driver.find_element(By.ID, 'answer')
# answer_input.send_keys(secret_code)
# submit_answer = driver.find_element(By.ID, 'submit')
# submit_answer.click()

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.select import Select
#
# with webdriver.Chrome() as browser:
#     # browser.get("https://parsinger.ru/selenium/5.5/5/test/test.html")
#     browser.get("https://parsinger.ru/selenium/5.5/5/1.html")
#
#
#     # Найти все контейнеры с блоками
#     main_container = browser.find_element(By.ID, 'main-container')
#     blocks = main_container.find_elements(By.TAG_NAME, 'div')
#
#     # Работаем только с первым блоком
#     first_block = blocks[0]
#
#     # Внутри первого блока ищем нужные элементы
#     spans = first_block.find_elements(By.TAG_NAME, 'span')
#     print('spans = ', len(spans))
#     selectors = first_block.find_elements(By.TAG_NAME, 'select')
#     print('selectors = ', len(selectors))
#     color_name = spans[0]
#     select = Select(selectors[0])
#     time.sleep(1)
#     select.select_by_visible_text(color_name.text)
#     time.sleep(1)
#     buttons = first_block.find_elements(By.TAG_NAME, 'button')
#     print('buttons = ', len(buttons))
#
#     finded_button = ''
#
#     for i in buttons:
#         if i.get_attribute('data-hex') == spans[0].text:
#             finded_button = i.get_attribute('data-hex')
#             finded_button = i
#             print(finded_button)
#     finded_button.click()
#     time.sleep(1)
#
#     checkboxes = first_block.find_elements(By.XPATH, "//input[@type='checkbox']")
#     print('checkboxes = ', len(checkboxes))
#     checkboxes[0].click()
#     text_fields = first_block.find_elements(By.XPATH, "//input[@type='text']")
#     print('text_fields = ', len(text_fields))
#     text_fields[0].send_keys(color_name.text)
#     time.sleep(1)
#     check_buttons = first_block.find_elements(By.XPATH, "//*[contains(text(), 'Проверить')]")
#     print('check_buttons = ', len(check_buttons))
#     check_buttons[0].click()
#     print(check_buttons[0].text)
#     # time.sleep(5)
#     # ----------------------
#
#     Работаем только с вторым блоком
#     second_block = blocks[2]
#
#     # Внутри второго блока ищем нужные элементы
#     spans = second_block.find_elements(By.TAG_NAME, 'span')
#     print('spans = ', len(spans))
#     selectors = second_block.find_elements(By.TAG_NAME, 'select')
#     print('selectors = ', len(selectors))
#     color_name = spans[0]
#     select = Select(selectors[0])
#     time.sleep(1)
#     select.select_by_visible_text(color_name.text)
#     time.sleep(1)
#     buttons = second_block.find_elements(By.TAG_NAME, 'button')
#     print('buttons = ', len(buttons))
#     finded_button = ''
#
#     for i in buttons:
#         if i.get_attribute('data-hex') == spans[0].text:
#             finded_button = i.get_attribute('data-hex')
#             finded_button = i
#             print(finded_button)
#     finded_button.click()
#     time.sleep(1)
#     checkboxes = second_block.find_elements(By.XPATH, "//input[@type='checkbox']")
#     print('checkboxes = ', len(checkboxes))
#     checkboxes[1].click()
#     text_fields = second_block.find_elements(By.XPATH, "//input[@type='text']")
#     print('text_fields = ', len(text_fields))
#     text_fields[1].send_keys(color_name.text)
#     time.sleep(1)
#     check_buttons = second_block.find_elements(By.XPATH, "//*[contains(text(), 'Проверить')]")
#     print('check_buttons = ', len(check_buttons))
#     check_buttons[0].click()
#     print(check_buttons[0].text)
#     time.sleep(5)



# ----------------------
#     body = browser.find_element(By.TAG_NAME, '')
#     all_check_buttons = browser.find_elements(By.XPATH, "//*[contains(text(), 'Проверить все элементы')]")
#     print('all_check_buttons = ', len(all_check_buttons))
#     print(all_check_buttons[0].text)
#     time.sleep(10)
#     # all_check_buttons[0].click()
#     # for i in all_check_buttons:
#     #     print(i.text)
#     # time.sleep(5)
#     alert = browser.switch_to.alert
#     secret_code = alert.text
#     print("Секретный код:", secret_code)
#     alert.accept()

# Секретный код: У Вас получилось!

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.select import Select
#
# with webdriver.Chrome() as browser:
#     # browser.get("https://parsinger.ru/selenium/5.5/5/test/test.html")
#     browser.get("https://parsinger.ru/selenium/5.5/5/1.html")
#
#
#     # Найти все контейнеры с блоками
#     main_container = browser.find_element(By.ID, 'main-container')
#     blocks = main_container.find_elements(By.TAG_NAME, 'div')
#
#     # Работаем только с первым блоком
#     first_block = blocks[0]
#
#     # Внутри первого блока ищем нужные элементы
#     spans = first_block.find_elements(By.TAG_NAME, 'span')
#     print('spans = ', len(spans))
#     selectors = first_block.find_elements(By.TAG_NAME, 'select')
#     print('selectors = ', len(selectors))
#     color_name = spans[0]
#     select = Select(selectors[0])
#     time.sleep(1)
#     select.select_by_visible_text(color_name.text)
#     time.sleep(1)
#     buttons = first_block.find_elements(By.TAG_NAME, 'button')
#     print('buttons = ', len(buttons))
#
#     finded_button = ''
#
#     for i in buttons:
#         if i.get_attribute('data-hex') == spans[i].text:
#             finded_button = i.get_attribute('data-hex')
#             finded_button = i
#             print(finded_button)
#             finded_button.click()
#             time.sleep(1)
#
#             checkboxes = first_block.find_elements(By.XPATH, "//input[@type='checkbox']")
#             print('checkboxes = ', len(checkboxes))
#             checkboxes[0].click()
#             text_fields = first_block.find_elements(By.XPATH, "//input[@type='text']")
#             print('text_fields = ', len(text_fields))
#             text_fields[0].send_keys(color_name.text)
#             time.sleep(1)
#             check_buttons = first_block.find_elements(By.XPATH, "//*[contains(text(), 'Проверить')]")
#             print('check_buttons = ', len(check_buttons))
#             check_buttons[0].click()
#             print(check_buttons[0].text)
            # time.sleep(5)
            # ----------------------









# Мой код по заданию Квест "Ад Цветовых Шифров"


# ----------------------
#
# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.select import Select
#
# with webdriver.Chrome() as browser:
#     browser.get("https://parsinger.ru/selenium/5.5/5/test/test.html")
#     spans = browser.find_elements(By.TAG_NAME, 'span')
#     divs = browser.find_element(By.TAG_NAME, 'div').find_elements(By.TAG_NAME, 'div')
#
#     divs_true = [i for i in divs if divs.index(i) % 2 == 0]
#     selectors = browser.find_elements(By.TAG_NAME, 'select')
#     colors_list = browser.find_elements(By.TAG_NAME, 'div')
#     checkboxes = browser.find_elements(By.XPATH, f"//input[@type='checkbox']")
#     poles = browser.find_elements(By.XPATH, f"//input[@type='text']")
#     element = browser.find_elements(By.XPATH, "//*[contains(text(), 'Проверить')]")
#     span_element = browser.find_elements(By.CSS_SELECTOR, "[id='main-container'] > div > span")
#
#
#     for i in range(len(spans)):
#         color_name = spans[i]
#         select = Select(selectors[i])
#         time.sleep(1)
#         select.select_by_visible_text(f'{color_name.text}')
#         time.sleep(1)
#         a = divs_true[i].find_element(By.XPATH, f"//button[@data-hex='{color_name.text}']")
#         a.click()
#         time.sleep(1)
#         checkboxes[i].click()
#         poles[i].send_keys(f'{color_name.text}')
#         time.sleep(1)
#         element[i].click()
#         time.sleep(80)
#     # Получаем секретный код из алерта
#     alert = browser.switch_to.alert
#     secret_code = alert.text
#     print("Секретный код:", secret_code)
#     alert.accept()
#     time.sleep(20)

# Секретный код: У Вас получилось!

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.common.keys import Keys
#
# with webdriver.Chrome() as browser:
#     browser.get("https://parsinger.ru/selenium/5.5/5/test/test.html")
#     wait = WebDriverWait(browser, 10)
#
#     # Находим все контейнеры
#     containers = browser.find_elements(By.CSS_SELECTOR, ".container")
#
#     for container in containers:
#         try:
#             # Находим span с цветом
#             span_color = container.find_element(By.TAG_NAME, 'span')
#             color_hex = span_color.get_attribute('style')[-6:]  # Получаем HEX-код цвета
#
#             # Выпадающий список
#             selector = container.find_element(By.TAG_NAME, 'select')
#             select = Select(selector)
#             select.select_by_value(color_hex)
#
#             # Кнопки
#             button = container.find_element(By.XPATH, f".//button[@data-hex='{color_hex}']")
#             button.click()
#
#             # Чекбокс
#             checkbox = container.find_element(By.XPATH, ".//input[@type='checkbox']")
#             if not checkbox.is_selected():
#                 checkbox.click()
#
#             # Текстовое поле
#             text_field = container.find_element(By.XPATH, ".//input[@type='text']")
#             text_field.clear()
#             text_field.send_keys(color_hex)
#
#             # Кнопка "Проверить"
#             check_button = container.find_element(By.XPATH, ".//button[contains(text(),'Проверить')]")
#             check_button.click()
#
#             # Ждём немного между шагами
#             time.sleep(1)
#
#         except Exception as e:
#             print(f'Ошибка в обработке контейнера: {e}')
#
#     # Проверяем все элементы
#     final_check_button = browser.find_element(By.ID, 'check_all')
#     final_check_button.click()
#
#     # Получаем секретный код из алерта
#     alert = browser.switch_to.alert
#     secret_code = alert.text
#     print("Секретный код:", secret_code)
#     alert.accept()
#
#     # Вставляем код в поле ответа
#     answer_input = browser.find_element(By.ID, 'answer')
#     answer_input.send_keys(secret_code)
#     submit_answer = browser.find_element(By.ID, 'submit')
#     submit_answer.click()


# from selenium import webdriver
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/methods/3/index.html')
#     cookies = browser.get_cookies()
#     count = 0
#     for cookie in cookies:
#         count += int(cookie['value'])
#     print(count)

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/scroll/2/index.html')
#     # Находим все чекбоксы
#     checkboxes = browser.find_elements(By.CSS_SELECTOR, "input[type='checkbox']")
#
#     # Активируем все чекбоксы
    # for checkbox in checkboxes:
    #     checkbox.click()
    #     time.sleep(0.25)
    # time.sleep(10)
    # Ждем появления всех чисел в <span>
    # WebDriverWait(browser, 20).until(
    #     EC.visibility_of_all_elements_located((By.CSS_SELECTOR, "span[id^='result']"))
    # )
    # Находим все элементы <span> с числами

    # results = browser.find_elements(By.TAG_NAME, "span")
    # print('results : ', len(results))


    # Извлекаем текстовые значения из <span> и преобразуем их в целые числа
    # numbers = [result.text for result in results]
    # lst = []
    # for result in results:
    #     lst.append(result.text)
    #
    # filtered_lst = list(filter(None, lst))
    # count = 0
    # for i in filtered_lst:
    #     filtered = int(i)
    #     count += filtered
    # print(count)
    # 13310
    # #
    # # Вычисляем сумму всех чисел
    # total_sum = sum(numbers)
    # print(f"Сумма всех чисел: {total_sum}")
    # print(f"Сумма всех чисел: {count}")
    # # Например, отправка через форму ввода:
    # input_field = browser.find_element(By.ID, "answer_input")
    # input_field.send_keys(total_sum)
    # submit_button = browser.find_element(By.ID, "submit_button")
    # submit_button.click()
# 12925
# --------------

# Мое решение задачи Infinite scroll

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.action_chains import ActionChains
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/infiniti_scroll_1/')
#     div = browser.find_element(By.XPATH, '//*[@id="scroll-container"]/div')
#     for x in range(10):
#         ActionChains(browser).move_to_element(div).scroll_by_amount(1, 500).perform()
#         time.sleep(2)
#     number_span = browser.find_elements(By.TAG_NAME, 'span')
#
#     rez = []
#     for i in number_span:
#         if i.text:
#             rez.append(int(i.text))
#     print(sum(rez))

    # print(sum(int(number.text) for number in browser.find_elements(By.TAG_NAME, 'span') if number.text))
# 86049950


# ====================================================================================

# Задание Квест "Ад Цветовых Шифров"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.select import Select
# 
# with webdriver.Chrome() as browser:
#     # browser.get("https://parsinger.ru/selenium/5.5/5/test/test.html")
#     browser.get("https://parsinger.ru/selenium/5.5/5/1.html")
# 
# 
#     # Найти все контейнеры с блоками
#     main_container = browser.find_element(By.ID, 'main-container')
#     blocks = main_container.find_elements(By.XPATH, "div[@style]")
# 
# 
#     for i in range(len(blocks)):
#         # Работаем только с первым блоком
#         current_block = blocks[i]
# 
#         # Внутри первого блока ищем нужные элементы
#         spans = current_block.find_elements(By.TAG_NAME, 'span')
#         print('spans = ', len(spans))
#         selectors = current_block.find_elements(By.TAG_NAME, 'select')
#         print('selectors = ', len(selectors))
#         select = Select(selectors[0])
#         select.select_by_visible_text(spans[0].text)
#         time.sleep(1)
#         buttons = current_block.find_elements(By.TAG_NAME, 'button')
#         print('buttons = ', len(buttons))
#         finded_button = ''
#         for i in buttons:
#             if i.get_attribute('data-hex') == spans[0].text:
#                 color = i.get_attribute('data-hex')
#                 print(color)
#                 finded_button = i
# 
#         time.sleep(1)
#         finded_button.click()
#         time.sleep(1)
# 
#         checkboxes = current_block.find_elements(By.XPATH, "input[@type='checkbox']")
#         print('checkboxes = ', len(checkboxes))
#         checkboxes[0].click()
#         text_fields = current_block.find_elements(By.XPATH, "input[@type='text']")
#         print('text_fields = ', len(text_fields))
#         text_fields[0].send_keys(spans[0].text)
#         time.sleep(1)
#         check_buttons = current_block.find_elements(By.XPATH, "*[contains(text(), 'Проверить')]")
#         print('check_buttons = ', len(check_buttons))
#         print(check_buttons[0])
#         check_buttons[0].click()
#         time.sleep(1)
#         print(check_buttons[0].text)
#         print("================================")
# 
#     check_buttons = current_block.find_elements(By.XPATH, "//*[contains(text(), 'Проверить все элементы')]")
#     print(f'<==========================check_buttons = {len(check_buttons)} ====================>')
#     print(check_buttons[0])
#     time.sleep(1)
#     check_buttons[0].click()
#     time.sleep(2)
# 
#     # Получаем секретный код из алерта
#     alert = browser.switch_to.alert
#     secret_code = alert.text
#     print("Секретный код:", secret_code)
#     alert.accept()


# Задание Кодовое имя: Операция "Младший Виртуоз"

# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# cookies_arr = [{'name': '0OIJ4G4ZLzK', 'value': 'kJcPzQu5Jr8ELK'},
#            {'name': 'O1C4sd3RK5udnZ6P', 'value': '4mYYxbfgnIvuip2ry58EQ'},
#            {'name': 'AUZgaLJ4Y', 'value': 'FLSZvYrkf1E57YMUkdD'},
#            {'name': '9PWJc0VXVtnXNcS5Tf', 'value': 'YQ2G4RayBoXSEqEgA3oXRN3FAvAMT'},
#            {'name': 'pN2x6MDb', 'value': 'htbtD59XD3vCemHRCe9iUxV1smvXAIk5XOwuHnnmMB0'},
#            {'name': 'AsqpQd', 'value': 'uNFFRiqeRrj25MwJajG4AxeKvCxKbHUSbbvzb3C'},
#            {'name': '73PVEdwTk0txDp4L', 'value': 'DTniz3Fwj110H24dfZfd5JqqfEtN'},
#            {'name': 'jZ1MwGy5z0L8ZW00U', 'value': 'sspfahNvfeo3zHWAIW0jdp2A9LyDbIm0'},
#            {'name': 'aLRosjpBhYrZ0J69a', 'value': 'zcoXWv5L9Pz5kwGeyP5jlAQ'},
#            {'name': '9LPCTyKTNmvBcnZ', 'value': 'GWBjw1Gosk4IKxuh5J2eu0ikgowOaZwP8FOm1ekKeQIxJDIXBy'},
#            {'name': 'psH0h', 'value': 'wNAUmVlQwG6VK5TvDfryipzWeLXX46WDbXUd8yGrhrA3Hnc'},
#            {'name': 'BULl3P', 'value': 'wefA0ljyA82kYpV1OoOixtAIp6xjmiQlS9SLeN'},
#            {'name': '3bIJVJCylqgshRC9r1dH', 'value': '6Y6EZE5dttgx7rKzP881nAhRPE'},
#            {'name': 'dBDhCzi6VO0', 'value': 'LKMcpZ6bEJy5IY352OMViznSP5OMqS9IgZB0YMv'},
#            {'name': '6SGnnuoZ7v', 'value': '6asdYiIPBsMEdO0mQ9Jlq0mSMbJjfg'},
#            {'name': '4dfAVZ1qZwijwYMUj', 'value': '3TOxOPelSdN6cK273'},
#            {'name': 'RMOPZQILwFr3o637M', 'value': 'RZoaTFTdytqxB6sZhO4ebrhWlxjhMoQn8ZiObpdcGgH'},
#            {'name': '08cQ7E3qHOOMk4uy1fLz', 'value': 'YfYkz9boRjDHLTahMuZcAJPzbjwTlRt1iNZzGl'},
#            {'name': 'YT1NKf55egy', 'value': '3MSmfnklFY5TzvM8np4guMsJYtmdHmbyHiz3Vp6Rtk7r4GWhC'},
#            {'name': 'cTKnm0a3H2euL46Ibi', 'value': 'HCZ0KYkidXfFowGinPuWG19cT79gEJC'},
#            {'name': 'mvAz0P7Igjs2JY', 'value': '8O67zvSDHJx'},
#            {'name': 'TzWXbWMvDBcKTo', 'value': 'dzwNYZCg4jpxKtpCeumwq0DO2KtGWLIHpQLOrzmGbXMC8G'},
#            {'name': '1BMgyMHkzUemIEr', 'value': '08Sd1v8kQi6eB1FTs9qfjDkJ9UfKCLOFGtDgbOlu9v9iiuu'},
#            {'name': 'Jig5voy', 'value': 'Pi4OA6hY21TeHlHyPMaMFHgY0BZRcQ9V0nXg'},
#            {'name': '10wa7lhCoJXIzEYW5kQ', 'value': 'BFp4YeKWKVKXHTOesJLleaAelwYwPz51C95IYzd'},
#            {'name': 'BqXt5D', 'value': 'n99ZSFFhseCs7aVjU31pYSJxqMgFYGfreFZl9ixb2NNHRBp'},
#            {'name': 'GJunU5e1BEvfd', 'value': 'y5YFJ3hF9hG45G86MD9W9nRk61JMsh8rsmbFFrDoeJVUfyBvZ'},
#            {'name': 'itFJBn79wksvZ15lc2', 'value': 'nXpdqpt0Po84uOuSU'},
#            {'name': 'O5Q70eOB5ivJt5DZ', 'value': 'AZRr2ATREeF9HQR2opgF'},
#            {'name': '6jBEUxI0a7x790m', 'value': 'comi8Mx5ig95NAiSO8'},
#            {'name': 'KpVF7aIkav32LuqIDI', 'value': 'ik4furgLieyUawgJpttvHxWoXm2zO19'},
#            {'name': 'OTRFyN', 'value': 'vlzV7Z97sWcJStZgDJiRjzIf'},
#            {'name': 'hKLzMbgdIlUTAMYSEo', 'value': 'Tq2l0QJ3ekwxY3uaC8n2ln1nDMWhltFQm2TNaBefAAzk'},
#            {'name': 'GJKNrAvRn', 'value': 'dByJXuSsAIz3Rnqa9BvU11okpnSydEZnkaqMQu9RoE'},
#            {'name': 'AowB8Q3t74JHmXTGc1', 'value': '02JklRAtbsNNe'},
#            {'name': 'xPpvKmo03bGBYrmqw', 'value': '7bf4FgaLKoj6YvGq4huLT5r9eCflo70QhI9gAPkMIuj4Bg'},
#            {'name': '8UqFFBP3Dm0s6XM', 'value': 'kSZJPw6oTBwqG94q'},
#            {'name': 'WeeXL7bKNWIZZkgX', 'value': 'ap3DPbBYqlfEOZ6'},
#            {'name': 'fhdSevpxKUzledgGtbL4', 'value': 'v5I4A3PFOlN9zWPDkedlC2eLbMZ5cn3cf8'},
#            {'name': '3H6lO', 'value': 'jxc9994fPQBKpnyr8aZBDZlMAolnxXh'},
#            {'name': 'QVen8QnA1648g4Dm9p', 'value': 'RXNYpaUTJlD4xVIOm'},
#            {'name': '3PxMnD9w', 'value': 'JC74xNLEc5ujZge7OmXj5EWk3hwdm4OH8FgF60D6pFl'},
#            {'name': 'o8yY57CZSN', 'value': 'afO10rX663gaVttfSxeE70Gd22JKxwJAli7EhEdzkxxME'},
#            {'name': 'UpAdf46rvxXW', 'value': 'Ft2FEQV71gLnG'},
#            {'name': 'WRrpVIAkMKiZVxHt299', 'value': 'FC53hjqCGooNgV'},
#            {'name': 'XHViH149aRl5', 'value': 'YbozZeoGCt3gO1kRMoLExcfCotBz'},
#            {'name': 'yjNLzeR4k', 'value': 'Chd2mmuK7nxuVTi'},
#            {'name': '5M4RGm', 'value': 'tj3HWN5mVpz9zgIie2ac2KHKIeABaou'},
#            {'name': 'CcxIZZYgojDZpHnO9zJl', 'value': 'xLiql8yXUxULBG9w2snaMLI4FjSyX'},
#            {'name': 'NScrEjcTmwo639PQqki', 'value': 'eOSFemtdjyphiPubTAzTICUhgw92By'},
#            {'name': '9b5OpL5NrCpmtsE', 'value': 'VKdEIeX5ZNTghD6sq3qyjBHJaUuXfpQ7YnYb'},
#            {'name': 'uyBoiSTHTtxV8Wszttb', 'value': 'SHEEfVcj1jNv3V1oqeT2wfEbWKZ0uJ2ljwv'},
#            {'name': 'qR6AeEoEbQb1GYRj', 'value': 'mA66a177y8e6Nm7BlKBvpcUrM3fm6y4K'},
#            {'name': 'l0Y9gn8MNtC', 'value': 'M1L2OUmAisn1c6DNB9mJfTHRM9V3HuXUAEGG8Zx'},
#            {'name': 'L8m4GeWyECR', 'value': 'QuFfnWXebyrwwqXfVvAN2dbSisST8IgGyLggrVzTjaCeQ'},
#            {'name': 'GxJSMQh9aZjFdhgjaAj', 'value': 'phOonlKiMt0xLDtvoB52TbATS1Ggm4Pv5lztk5vTNkXVqp'},
#            {'name': 'GRE1eZ8D1bb', 'value': 'llpIP76V4S978YmQcfW'},
#            {'name': 'dooT1cyS41bIWEB9c', 'value': 'ORu004k9aFl9FdS77Iz'},
#            {'name': 'csjauyxnCpBySvkXTDzS', 'value': 'SJKqcIqWDbUJbxnHfD8jNJzYKb3Yp3TPIRDIpxCNB'},
#            {'name': 'Y6CgAqWN8', 'value': 'qu0g6xEm0iJeTKM8NfOZUxP0XQaCtUfiTWHtQJ5soU5cpZ'},
#            {'name': 'xxtL44KLbN60b5q', 'value': 'RSNFhhicL7pWpo3gvE3tJbHaIjU'},
#            {'name': 'KcvqC30', 'value': '58IlGI646RMaGMYtL5XYqxFq8UaMwjPDNFNApAuDpUI9tMoM4t'},
#            {'name': 'y761v6wZDo3V7O', 'value': '3i9iZjnZXdHlJxDz7ZrkPthYdI3PowS5yRomV0v8fR9WVco4'},
#            {'name': 'Ixr7AetyC', 'value': 'lYRaNZAnoNHc9UZIoXI9E'},
#            {'name': 'QIvvsr04T0JGVJE', 'value': 'tr6fE8moJI897w967QTmKojC730GdkKTUonevQbYsHQ71mi'},
#            {'name': 'CBTq9zQjJx', 'value': 'z7BuIeFufYeZysVnrglrDJk8KW8UBWYt62'},
#            {'name': '2ALhFQM7svECfgsSaiTa', 'value': 'VGMsulQVoobUe4m6w8dZGej8jFzSES3hzl9OG2csqpl'},
#            {'name': '7VQixJTzu2H', 'value': 'jPnLpldHTFNgPCH1RUlmRQx7N58P7CQHajLYvGxho'},
#            {'name': 'KdmUSh1SJH6M9', 'value': 'HPKIgmOBqq6Ln6QSPKedXuFpOoWhrOUzCxRMlcoJ2Gd0S7Hd'},
#            {'name': 't6B9gl6QeGEDl1LW', 'value': 'kGs0hk4Pmeb83dBbuHTSzIVNcY0G4iucq73lkCMwt6Akv4w'},
#            {'name': 'gcjmy3', 'value': 'QtB6duKOGc7eNc9MFwiOOaikXCYQg6dO4m66sJJxkRebKIKiR'},
#            {'name': '2oBZU9j', 'value': '2U80qbFDpRElKTshedtaZ42OzYG48OQckEt2Zy9D7T'},
#             {'name': 'KXIYO4xMrWh', 'value': 'ibyAZPfXAsPqptPaNyL'},
#            {'name': 'g2tyy8erqS4E5pdSynCB', 'value': 'VN5zSYJpNHQC14FVl'},
#            {'name': 'lLhLcbED3XAgAPaMp', 'value': 'tBUVWsfSNg0Iv4TLPAmBRm2m2nrWh'},
#            {'name': 'iUfgKa7OX', 'value': 'GtyGoiA00RNiTgqvbXs78khbzQ7d0rh5xTk1aZK'},
#            {'name': 'WQGGXKzZXvRXLC0', 'value': 'itGXA2mVtchzcqstP39BvfBvwh'},
#            {'name': 'p37sYwX5mgtwXJl3yFBL', 'value': 'h20iY8XooVE'},
#            {'name': 'tubsOLf', 'value': 'YGlaF0EEJrT1c5Z2HBAWnc1Q3an3Ob'},
#            {'name': 'mg1Pr2NJJEnw2UkGFg', 'value': 'L48wovkYz32wa16iiswcgbA6JmyVoysUqjfm4i7'},
#            {'name': 'V55E3ui8KHXybSDSSnoc', 'value': '7rhA8PSMZFy1aC8CQXbitOxY0qdUkDOUWijijIvlHhtB0q1'},
#            {'name': 'AcWBQQy', 'value': 'zl1GXRHA3neBLCN8'},
#            {'name': 'PtvgV4eJ21CrPE3xeH9', 'value': '1tU9KvLdq2uRNRKtA'},
#            {'name': 'XjuSocgLwoMvFo8a', 'value': 'pvmx5A97Sad0U6d6i'},
#            {'name': 'mMpdmPLcZEAZDzNyA8a2', 'value': 'WG6CrZ3zXfxN84hJXUKJq0ZroYditsADYplxwhkgXkUcZ'},
#            {'name': 'tojhHp0ZlGrZ8Y3', 'value': 'fqpJvGkfQRT7ytNTU5KPum150MmcVR1nja0QIQRVEOPiNvT7Pg'},
#            {'name': 'LDHgCR5PNoqYdffU5', 'value': '7a0tCBgGzylPTGUStOuNXORrRWwy03Upm2CvJX'},
#            {'name': 'F4xcvPzuYYAvDrvDi', 'value': 'zQEpxlKpKprtwFbJyx0XYxFrlc8XP2RhRG'},
#            {'name': 'fmnoi', 'value': 'yB9333KC4bP4SHUF90Kj7OC9QXz22WAZ3xtZxLi9'},
#            {'name': 'TbGdmTkjcC52T7q', 'value': '2HCejTOfB98e30JMj3Pz9Ok9xLz5Y9lkaJaHoRF2vA5xq0i'},
#            {'name': 'tg3vMrNIZHs', 'value': '2XRV99ShR8yc0bCe0QOuC9xd0A'},
#            {'name': '8FaJo5TVO7TmoOI', 'value': 'bGYulAOS3ARzN3Rsyx9JJzu'},
#            {'name': 'YLBwBAUCJ05p5fx2', 'value': 'Z8lGSb7AnZKVwlIqKgRIafpIfTVufj'},
#            {'name': 'fpZCwfH', 'value': 'cqo4KOj8LSagd6VUhBrq6RJtUquwK7mJaDQsQb'},
#            {'name': 'zjUiv081bH', 'value': 'LSJtgc56ylEJGMd1AhE9QcXudC8g'},
#            {'name': 'yiWR1RtAnWH71I1', 'value': 'ruskXwdCQOfbfIgtKcetVb'},
#            {'name': 'KMKvYURaBlIEmtyX', 'value': 'NFIzhI600J5QYN'},
#            {'name': 'hbFS4sDwQh', 'value': 's4zWhushscPPDDFqT5tzPJqix0HMjjG'},
#            {'name': 'b9wAAVSyw4V2LQ', 'value': 'SDkldbPnf6NjLZSxWZV7CpCW'},
#            {'name': 'jFhFn0wPFRG', 'value': 'RYqOrD21ZN7aUeBXqISZ2afocnvvwd6hw3BXUj1wEm0mUO'}]
#
# # Инициализация драйвера Chrome
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.6/1/index.html')
#
#     # Удаление всех кукис для чистого эксперимента
#     browser.delete_all_cookies()
#
#     min_age  = sys.maxsize * 2 + 1
#     max_skills = 0
#     cookie_finded = {}
#     for cookie_a in cookies_arr:
#         browser.delete_all_cookies()
#         browser.add_cookie(cookie_a)
#         browser.refresh()
#
#         cookies = browser.get_cookies()
#
#         # for cookie in cookies:
#         #     print(cookie)
#
#         time.sleep(1)
#
#         ages = browser.find_elements(By.ID, 'age')
#         # print(f"============={len(ages)}==================")
#         # for age in ages:
#         #     print(age.text)
#
#         skills = browser.find_elements(By.XPATH, "//ul[@id='skillsList']/li")
#         # print(f"============={len(skills)}==================")
#         # for skill in skills:
#         #     print(skill.text)
#
#         # print(ages[0].text, "Skills:", len(skills), "Cookie:", cookies[0]['value'] )
#         age_int = int(ages[0].text.rsplit(" ")[-1])    #int(x['name'].rsplit("_")[-1])
#         # print(age_int, type(age_int))
#         if min_age > age_int:
#             print('min_age', min_age, 'new_min_age', age_int)
#             min_age = age_int
#             max_skills = 0
#
#         skills_len = len(skills)
#         if min_age == age_int:
#             if max_skills < skills_len:
#                 print('max_skills', max_skills, 'new_max_skills', skills_len)
#                 print(cookies[0]['value'])
#                 cookie_finded = cookies[0]['value']
#                 max_skills = skills_len
#
#         print('===============================')
#
#     # cookies = browser.get_cookies()
#     # for cookie in cookies:
#     #     print(cookie)
#
#     print(min_age, max_skills, cookie_finded)
#     time.sleep(1)
#
#
# # Добавляем аргумент для запуска браузера в фоновом режиме (без графического интерфейса)
# options_chrome = webdriver.ChromeOptions()
# options_chrome.add_argument("--headless=new")



# # Решение задания: Десант в глубину: Поиск сокровищ среди скрытых элементов
#
# import time
# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/infiniti_scroll_2/')
#     div = browser.find_element(By.XPATH, "//*[@id='scroll-container']/div")
#
#     for i in range(10):
#         ActionChains(browser).move_to_element(div).perform()
#         time.sleep(2)
#
#
#     value = browser.find_elements(By.TAG_NAME, 'p')
#     rez = []
#     for g in value:
#         if g.text:
#             rez.append(int(g.text))
#     print('value ===', len(rez))
#     print(rez)
#     print('sum(rez) =====', sum(rez)) # sum(rez) ===== 499917600




# ==============================

#  Решение задания: Операция "Пятерка": Одновременный Глубокий Скроллинг

# import time
# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# # class="main"
#     # id="scroll-wrapper_1"
#         # class="scroll-container_1"
#             # By.ID, 'span'
#             # /div class="spinner_1"
#
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/infiniti_scroll_3/')
#
#     for f in range(1, 6):
#         div = browser.find_element(By.XPATH, f"//*[@id='scroll-container_{f}']/div")
#         for i in range(10):
#             ActionChains(browser).move_to_element(div).perform()
#             time.sleep(2)
#
#
#         value = browser.find_elements(By.TAG_NAME, 'span')
#         rez = []
#         for g in value:
#             if g.text:
#                 rez.append(int(g.text))
#
#     print('value ===', len(rez))
#     print(rez)
#     print('sum(rez) =====', sum(rez)) # sum(rez) ===== 159858750

    # derevo = browser.find_element(By.XPATH, '//*[@id="scroll-container_1"]/div')
    # for i in range(1, 6):
    #     derevo = browser.find_elements(By.XPATH, f'//div[@id="scroll-container_{i}"]/div')
    # # print(derevo.text)
    # # print(len(derevo))
    # # for i in range(10):
    # #     ActionChains(browser).move_to_element(derevo).perform()
    #     scroll_handler(derevo)
    #     time.sleep(2)
    # value = browser.find_elements(By.TAG_NAME, 'span')
    # rez = []
    # for i in value:
    #     # value = i.find_element(By.TAG_NAME, 'span')
    #     if i.text:
    #         rez.append(int(i.text))
    #     # print(i.text)
    # print('len(rez)', len(rez))
        # print(len(i.text))
        # print(value.text)

# ===============================================
# action.scroll_to_element(element) — Метод предназначен для автоматического прокручивания страницы к указанному элементу.
#
# # Найти элемент на странице
# element = driver.find_element(By.ID, "someElement")
#
# # Использование ActionChains для прокрутки к элементу
# actions = ActionChains(driver)
# actions.scroll_to_element(element).perform()

#  Решение задания:  Кодовое имя: "Космическая чистка урана"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.7/1/index.html')
#     button = browser.find_elements(By.CLASS_NAME, 'clickMe')
#     count = 0
#     for i in button:
#         # Подсказка
#         # time.sleep(0.5)
#         browser.execute_script("return arguments[0].scrollIntoView(true);", i)
#
#         # time.sleep(0.5)
#         # tem = i.text
#         i.click()
#         count += 1
#         # time.sleep(0.5)
#     print(count)
#
#
#     time.sleep(0.5)
#     # 10. Получаем секретный код из алерта
#     alert = browser.switch_to.alert
#     secret_code = alert.text
#     print("Секретный код:", secret_code) # Секретный код: JKf9-034D-DE02-PB2G-QB8Z-81VN-30GK-IO90-UT89
#     alert.accept()

# ===============================================

#  Решение задания: Операция 'Зелёный Лотос'

# div id = "main_container"
    # button class="timer_button" id="button1"  После нажатия на кнопку добавляется style="background-color: green;"
    #  7.83 /button

# Пример
# actions.click_and_hold(button).pause(hold_time).release(button).perform()

# import time
# from selenium import webdriver
# from selenium.webdriver.common import actions
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.action_chains import ActionChains
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.7/5/index.html')
#     # div = browser.find_element(By.XPATH, f'//div[@id="button{i}"]/div')
#     buttons = browser.find_elements(By.TAG_NAME, 'button')
#     print('buttons === :  ', len(buttons))
#     for button in buttons:
#         print(button.text)
#         # Начинаем удерживать кнопку
#         action_chain = ActionChains(browser)
#         action_chain.click_and_hold(button).perform()
#
#         # Периодически проверяем цвет фона кнопки
#         while True:
#             current_style = button.get_attribute("style")
#
#             # Если фон стал зеленым, отпускаем кнопку
#             if "background-color: green;" in current_style:
#                 action_chain.release().perform()
#                 break
#
#             # Ждем немного перед следующей проверкой
#             time.sleep(0.2)
#
#     # 10. Получаем секретный код из алерта
#     alert = browser.switch_to.alert
#     secret_code = alert.text
#     print("Секретный код:", secret_code) # GFL4-ED40-F32F-HJ24-0BXS-235N-PIRE-123VD-123F
#     alert.accept()

# ===============================================

#  Решение задания:  Чётный Выбор: Бесконечный Чекбоксовый список

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
#
# # div id="main_container"
#     #div class="child_container"
#         #input type="checkbox" value="2"
#
# # Инициализация драйвера Chrome
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.7/4/index.html')
#     div = browser.find_element(By.XPATH, '//div[@id="main_container"]/div/input')
#     browser.execute_script("arguments[0].scrollIntoView(true);", div)
    # print('len(div) =========  : ', len(div))
    # for i in div:
    #     browser.execute_script("arguments[0].scrollIntoView(true);", i)
    #     ops = i.get_attribute('value')
    #     if int(ops) % 2 == 0:
    #         i.click()

    # time.sleep(5)
    # button = browser.find_element(By.CLASS_NAME, 'alert_button')
    # button.click()
    # # 10. Получаем секретный код из алерта
    # alert = browser.switch_to.alert
    # secret_code = alert.text
    # print("Секретный код:", secret_code) #
    # alert.accept()

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# 
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.7/4/index.html')
#     # input_tags = browser.find_elements(By.XPATH, '//*[@id="main_container"]/div[100]')
#     lst = []
#     for i in range(1, 101):
#         input_tag = browser.find_element(By.XPATH, f'//*[@id="main_container"]/div[{i}]')
#         browser.execute_script("return arguments[0].scrollIntoView(true);", input_tag)
#         input_t = input_tag.find_elements(By.TAG_NAME, 'input')
# 
#         for tag_input in input_t:
#             ops = tag_input.get_attribute('value')
#             if int(ops) % 2 == 0:
#                 tag_input.click()
#                 lst.append(int(ops))
#     print('lst =======  ', lst)
# 
#     button = browser.find_element(By.CLASS_NAME, 'alert_button')
#     button.click()
#     time.sleep(2)
#     # 10. Получаем секретный код из алерта
#     alert = browser.switch_to.alert
#     secret_code = alert.text
#     print("Секретный код:", secret_code) # Секретный код: 5402f04236450f263540jk406504l506
#     alert.accept()


============================================================

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.common.action_chains import ActionChains
# 
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/7/7.3.5/index.html')
#     actions = ActionChains(browser)
#     skrol1 = browser.find_element(By.ID, "scrollable-container-left")
#     skrol2 = browser.find_element(By.ID, "scrollable-container-right")
#     # print(click.text)
#     time.sleep(1)
#     actions.click(skrol1).key_down(Keys.END).perform()
#     actions.click(skrol2).key_down(Keys.END).perform()
#     time.sleep(1)
    # element2 = browser.find_element(By.XPATH, "//div[@data-action='get_password']")
    # actions.click(element2).perform()
    # actions.key_down(Keys.CONTROL) \
    #         .key_down(Keys.ALT) \
    #         .key_down(Keys.SHIFT) \
    #         .key_down('T') \
    #         .key_up(Keys.CONTROL) \
    #         .key_up(Keys.ALT) \
    #         .key_up(Keys.SHIFT) \
    #         .key_up('T') \
    #         .perform()
    # double_click = browser.find_element(By.ID, "dblclick-area")
    # actions.double_click(double_click).perform()
    # target = browser.find_element(By.ID,"target")
    # actions.drag_and_drop(mrGriffin, target).perform()
    # for i in range(100):
    #     pol = browser.find_elements(By.CLASS_NAME, 'interactive')
    #     pol[i].send_keys('pole')
    #     time.sleep(0.2)
    #     pol[i].send_keys(Keys.ENTER)
    #     pol[i].send_keys(Keys.DOWN)
    #     time.sleep(0.2)

    # time.sleep(3)
    # password = browser.find_element(By.ID, 'passwordContainer')
    # password = browser.find_element(By.XPATH, "//span[@key='access_code']")
    # print('password ====', password.text)
    # pole.send_keys('pole')
    # height = browser.execute_script("return document.body.scrollHeight")
    # height = browser.execute_script("return window.innerHeight")
    # elem = browser.find_element(By.ID, 'target')
    # elem = browser.find_element(By.ID, 'secret-container')
    # print(height)
    # browser.execute_script("return arguments[0].scrollIntoView(true);", elem)
    # elem.click()
    # time.sleep(3)
    # print(browser.find_element(By.ID, 'secret-container').text)
    # time.sleep(3)
    # element1 = browser.find_element(By.ID, "this_pic")
    # element1.click()
    # time.sleep(4)
    # browser.get_screenshot_as_file("C:\\Users\\s.vetrov\\Downloads\\scrinSHOT.png") # Пароль: Рыба-Меч
    # / html / body / h1[1]
    # id = "this_pic"
    # element1.click()
    # time.sleep(40)
    # element2 = browser.find_element(By.TAG_NAME, "a")
    # element2.click()
    # time.sleep(2)
    # browser.back()
    # time.sleep(2)
    # browser.back()
    # time.sleep(2)
    # button = browser.find_element(By.ID, 'getPasswordBtn') # Секретный код: B@ck 1n Bl@ck
    # button.click()
    # time.sleep(20)
    # id = "getPasswordBtn"
    # parent_element = browser.find_element(By.ID, 'parent_id')
    # elements = browser.find_elements(By.TAG_NAME, "a")
    # print('len(elements)  ========', len(elements))
    # count = 0
    # lst = []
    # for element in elements:
        # button = element.find_element(By.TAG_NAME, 'a')
        # print(button.get_attribute('href').isdigit())
        # lst.append(element.get_attribute('stormtrooper'))
        # if element.get_attribute('stormtrooper').isdigit():
            # lst.append(button.get_attribute('stormtrooper'))
            # count += int(element.get_attribute('stormtrooper'))
        #     print(int(button.get_attribute('stormtrooper')))
        # button.click()
        # el = button.text
    # print('len(lst) =======', len(lst))
    # print('lst ===========', lst)
    # print(el)
    # shturmoviki = count.text
    # print('count.text ===========', count)
    # time.sleep(2)
    # inputi = browser.find_element(By.ID, "inputNumber")
    # inputi.send_keys(count)
    # time.sleep(2)
    # inp = browser.find_element(By.ID, "checkBtn")
    # inp.click()
    # code = browser.find_element(By.ID, "feedbackMessage").text
    # print(code)
    # password = browser.find_element(By.TAG_NAME, 'password')  # Код: 7H3-D4RK-S1D3-4LW4YS-W1NS
    # time.sleep(2)
    # print(password.text)
    # print(child_element.get_attribute('password'))
    # # text.send_keys('Дрогон')
    # text = browser.find_element(By.ID, 'text1').text
    # text_input = browser.find_element(By.ID, 'userInput')
    # text_input.send_keys(text)
    # button2 = browser.find_element(By.ID, 'checkBtn')
    # button2.click()
    # text2 = browser.find_element(By.ID, 'text2').text
    # time.sleep(5)
    # print(text2)

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# import time
# from PIL import Image
# from io import BytesIO  # Для работы с данными скриншота в памяти
#
# # 1. Зайти на сайт-тренажёр с помощью Selenium.
# # Укажите путь к вашему webdriver (chromedriver, geckodriver, etc.).
# # Если webdriver находится в PATH, указывать путь не нужно.
# # driver = webdriver.Chrome() # Или webdriver.Firefox(), webdriver.Edge(), etc.
# # driver.get("https://parsinger.ru/selenium/6/6.2.1/index.html")  # Замените на URL вашего сайта-тренажера
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/6/6.2.1/index.html')
#
#     # 2. Найти картинку с id="this_pic"
#     image_element = browser.find_element(By.ID, "this_pic")
#     image_element.click()
#     # 3. Сделать скриншот картинки.
#
#     # ----------------- Вариант 1: Сохранение скриншота всего окна и обрезка -----------------
#     #  Этот вариант более надёжен, особенно если возникают проблемы с захватом только элемента.
#
#     # Делаем скриншот всего окна
#     browser.save_screenshot("full_page_screenshot.png")
#
#     # Получаем координаты и размеры элемента
#     location = image_element.location
#     size = image_element.size
#     x = location['x']
#     y = location['y']
#     width = size['width']
#     height = size['height']
#
#     # Открываем скриншот с помощью PIL
#     im = Image.open("full_page_screenshot.png")
#
#     # Обрезаем изображение, чтобы получить только картинку
#     cropped_image = im.crop((x, y, x+width, y+height))
#
#     # Сохраняем обрезанное изображение
#     cropped_image.save("screenshot_of_image.png")
#     print("Скриншот картинки сохранён в файл screenshot_of_image.png")


# import time
# from selenium import webdriver
#
# with webdriver.Chrome() as browser:
#     urls = [
#         "http://parsinger.ru/blank/0/1.html",
#         "http://parsinger.ru/blank/0/2.html",
#         "http://parsinger.ru/blank/0/3.html",
#         "http://parsinger.ru/blank/0/4.html",
#         "http://parsinger.ru/blank/0/5.html",
#         "http://parsinger.ru/blank/0/6.html"
#     ]
#
#     # Открытие каждой ссылки в новой вкладке
#     for url in urls:
#         browser.switch_to.new_window('tab')  # Создание новой вкладки и переключение на нее
#         browser.get(url)  # Открытие URL
#
#     # Переключение на каждую вкладку и получение информации
#     for x in range(len(browser.window_handles)):
#         browser.switch_to.window(browser.window_handles[x])  # Переключение на вкладку
#         time.sleep(1)
#         print(browser.title, browser.window_handles[x])  # Получение title и handle текущей вкладки

# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as driver:
#     driver.get('https://parsinger.ru/selenium/5.8/4/index.html')
#
#     # Переключаемся на iframe
#     iframe_element = driver.find_element(By.TAG_NAME, 'iframe')
#     driver.switch_to.frame(iframe_element)
#
#     # Извлекаем HTML содержимое из iframe
#     iframe_content = driver.page_source
#
#     print(iframe_content)

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Условие задачи: "Поиск секретного кода"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.8/1/index.html')
#     buttons = browser.find_elements(By.CLASS_NAME, 'buttons')
#     for i in buttons:
#         i.click()
#         time.sleep(0.2)
#         browser.switch_to.alert.accept()
#         rez = browser.find_element(By.ID, "result")
#         if rez.text.isdigit():
#             print('Секретный код: ==== ', rez.text) # Секретный код: ====  321968541687435564865796413874
#             break
#     time.sleep(3)
    # print('len(buttons)==========', len(buttons))

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Поиск секретных пин-кодов

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.8/2/index.html')
#     buttons = browser.find_elements(By.CSS_SELECTOR, '[class="buttons"]')
#     for i in buttons:
#         i.click()
#         time.sleep(0.2)
#         alert = browser.switch_to.alert
#         # print(alert.text)
#         alrt = alert.text
#         alert.accept()
#         time.sleep(0.2)
#         browser.find_element(By.ID, 'input').send_keys(alrt)
#         time.sleep(0.2)
#         browser.find_element(By.ID, 'check').click()
#         if browser.find_element(By.ID, 'result').text.isdigit():
#             print('Секретный код ===== :', browser.find_element(By.ID, 'result').text) # Секретный код ===== : 867413857416874163897546183542
#             break
#     time.sleep(3)

# ===============================================================================

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.action_chains import ActionChains
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/7/7.4.1/index.html')
#     ActionChains(browser).scroll_by_amount(0, 1000).perform()
#     time.sleep(4)
#
#     step = browser.find_element(By.CSS_SELECTOR, '[class="countdown"]')
#     step1 = step.text[5:]
#     print('step1 ===== :', step1) # Код: S1E2-L3E4-N5I6-U7M8
#     ActionChains(browser).scroll_by_amount(1, 1000).perform()
#     step2 = browser.find_element(By.CSS_SELECTOR, '[type="text"]')
#     step2.send_keys(step1)
#     browser.find_element(By.TAG_NAME, 'button').click()
#     time.sleep(3)
#     pasword = browser.find_element(By.ID, "final-key")
#     time.sleep(4)
#     print('pasword.text =====', pasword.text) # 🎉 Пароль: S9ECRET-K9EY-9999

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Секретный код: кибер-расследование

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.8/3/index.html')
#     pin_cods = browser.find_elements(By.CSS_SELECTOR, '[class="pin"]') # Пин-коды
#     print('pin_cods ====', len(pin_cods))
#     for i in pin_cods:
#         num = i.text
#         button = browser.find_element(By.ID, "check")  # Кнопка проверки
#         button.click()
#         time.sleep(0.2)
#         modal = browser.switch_to.alert
#         time.sleep(0.2)
#         modal.send_keys(num)
#         time.sleep(0.2)
#         modal.accept()
#         time.sleep(0.2)
#         rez = browser.find_element(By.ID, "result").text  # Результат
#         if rez == 'Неверный пин-код':
#             continue
#         elif rez != 'Неверный пин-код':
#             print('rez========', rez)
#             break


# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Настройка вьюпорта браузера

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# 
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/window_size/1/')
#     browser.set_window_size(568, 700)
#     time.sleep(1)
#     rez = browser.find_element(By.ID, "result").text
#     time.sleep(1)
#     print('rez ======', rez) # rez ====== 1684163857416385746374

# 16px занимают боковые границы браузера: левая и правая.
# 133px занимает верхняя панель управления браузера и нижняя граница.558 543


# ===============================================================================

# Решение задания из блока "Скролинг страниц"  Жми LIKE 👍

# from selenium import webdriver
# from selenium.webdriver import ActionChains, Keys
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/7/7.5/index.html')
#     container = browser.find_element(By.ID, 'container')
#     elements = []
#     total = 0
#     while True:
#         divs = [x for x in browser.find_elements(By.CLASS_NAME, 'card')]
#         for div in divs:
#             if div not in elements:
#                 div.find_element(By.CLASS_NAME, 'like-btn').click()
#                 total += int(div.find_element(By.CLASS_NAME, 'big-number').text)
#                 elements.append(div)
#         if len(elements) == 100:
#             break
#         container.send_keys(Keys.ARROW_DOWN)
# print(total) # 500000

# 
# ===============================================================================

# # Добавляем аргумент для запуска браузера в фоновом режиме (без графического интерфейса)
# options_chrome = webdriver.ChromeOptions()
# options_chrome.add_argument("--headless=new")
# import time

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Открываем новые вкладки new_window

import time

from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait

with webdriver.Chrome() as browser:
    browser.get('about:blank')
    time.sleep(5)
    browser.switch_to.new_window('tab')
    browser.get('https://parsinger.ru/selenium/8/8.1/site1/') # 244434315352523523523523523563463999
    time.sleep(5)
    print('Число с сайта номер один', browser.title)
    site1 = browser.title
    print('эшкереееерререэшкере')
    hi = [i for i in site1 if i not in '4, 3, 9']
    num1 = "".join(hi)
    print(num1) # ['2', '1', '5', '5', '2', '5', '2', '5', '2', '5', '2', '5', '2', '5', '2', '5', '6', '6']
    browser.switch_to.new_window('tab')
    browser.get('https://parsinger.ru/selenium/8/8.1/site2/')
    time.sleep(5)
    print('Число с сайта номер два', browser.title)
    site2 = browser.title
    print('эшкереееерререэшкере')
    hu = [i for i in site2 if i not in '7, 8, 0']
    num2 = "".join(hu)
    print(num2)
    print('эшкереееерререэшкере')
    print(int(num1) + int(num2)) # 4135565044598459771911

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Поиск секретного сочетания размера окна

# from selenium import webdriver
# from selenium.webdriver.chrome.options import Options
#
# options = Options()
# options.add_argument('--headless')
# window_size_x = [616, 648, 680, 701, 730, 750, 805, 820, 855, 890, 955, 1000]
# window_size_y = [300, 330, 340, 388, 400, 421, 474, 505, 557, 600, 653, 1000]
# browser = webdriver.Chrome(options=options)
# browser.get('https://parsinger.ru/window_size/2/index.html')
# for x in window_size_x:
#     for y in window_size_y:
#         browser.set_window_size(x, y)
#         print(browser.find_element('xpath', '//span[@id="result"]').text)
########################
# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# window_size_x = [616, 648, 680, 701, 730, 750, 805, 820, 855, 890, 955, 1000]
# window_size_y = [300, 330, 340, 388, 400, 421, 474, 505, 557, 600, 653, 1000]
# target_width = 16
# target_height = 95
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/window_size/2/index.html')
#     for x in window_size_x:
#         for y in window_size_y:
#             browser.set_window_size(x + target_width, y + target_height)
#             time.sleep(1)
#             rez = browser.find_element(By.ID, 'result').text
#             if rez:
#                 print(f"{x} x {y}")
#                 print('rez =====', rez) # rez ===== 9874163854135461654
#                 break
########################
# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# start = time.time()
# window_size_x = [616, 648, 680, 701, 730, 750, 805, 820, 855, 890, 955, 1000, 955]
# window_size_y = [300, 330, 340, 388, 400, 421, 474, 505, 557, 600, 653, 1000, 600]
#
# with webdriver.Firefox() as browser:
#     browser.get('http://parsinger.ru/window_size/2/index.html')
#     delta = 85
#
#     for x, y in zip(window_size_x, window_size_y):
#         browser.set_window_size(x, y+delta)
#         result = browser.find_element(By.ID, 'result').text
#         if result.isdigit():
#             print(result)
#             break
#
# print('Run time', time.time()-start, 'seconds.')

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Таинственные размеры окна

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# window_size_x = [616, 648, 680, 701, 730, 750, 805, 820, 855, 890, 955, 1000]
# window_size_y = [300, 330, 340, 388, 400, 421, 474, 505, 557, 600, 653, 1000]
# target_width = 16
# target_height = 95
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/window_size/2/index.html')
#     for x in window_size_x:
#         for y in window_size_y:
#             browser.set_window_size(x + target_width, y + target_height)
#             # time.sleep(1)
#             innerWidth = int(browser.find_element(By.ID, 'width').text.split(': ')[1])
#             innerHeight = int(browser.find_element(By.ID, 'height').text.split(': ')[1])
#             rez = browser.find_element(By.ID, 'result').text
#             if rez:
#                 print('{'  f"'width': {innerWidth}, 'height': {innerHeight}"  '}')
#                 print(f"{x} x {y}")
#                 print({'width': x, 'height': y})
#                 print('rez =====', rez) # {'width': 955, 'height': 600}
#                 break

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Охотник за загадочными числами

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/blank/3/index.html')
#     buttons = browser.find_elements(By.CSS_SELECTOR, '[type="button"]')
#     count = 0
#     lst =[]
#     for i in buttons:
#         i.click()
#         time.sleep(1)
#     for j in range(len(browser.window_handles)):
#         browser.switch_to.window(browser.window_handles[j])
#         time.sleep(1)
#         if browser.title.isdigit():
#             count += int(browser.title)
#             lst.append(browser.title)
#     print('count ===', count) # count === 77725787998028643152187739088279
#     print(lst)

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Откройте сокровища интернета

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# sites = ['http://parsinger.ru/blank/1/1.html', 'http://parsinger.ru/blank/1/2.html', 'http://parsinger.ru/blank/1/3.html',
#          'http://parsinger.ru/blank/1/4.html', 'http://parsinger.ru/blank/1/5.html', 'http://parsinger.ru/blank/1/6.html',]
#
# with webdriver.Chrome() as browser:
#     total = 0
#     lst = []
#     for i in sites:
#         browser.switch_to.new_window('tab')
#         browser.get(i)
#         browser.find_element(By.CSS_SELECTOR, '[type="checkbox"]').click()
#         # lst.append(int(browser.find_element(By.ID, "result").text) ** 0.5)
#         total += int(browser.find_element(By.ID, "result").text) ** 0.5
#
#     # print(lst)
#     print(round(total, 9)) # 334703.720482347
#     sum = sum([int(i) for i in lst])
#     print(sum) # 334700   # 334 703,720482347

# [40530.95533046316, 32014.164115278723, 55715.93040594404, 95206.67385220429, 55334.5082204586, 55901.488557998164]

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Погружение во фреймы


# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.8/5/index.html') # FD79-32DJ-79XB-124S-P3DX-2456-DFB-DSA9
#     time.sleep(2)
#
#     for i in range(1, 10):
#         iframe = browser.find_element(By.CSS_SELECTOR, f'[src="{i}.html"]') # src="1.html"
#         browser.switch_to.frame(iframe)
#         browser.find_element(By.CSS_SELECTOR, '[onclick="showNumber()"]').click()
#         number = browser.find_element(By.ID, "numberDisplay").text
#         browser.switch_to.default_content()
#         inp = browser.find_element(By.ID, 'guessInput')
#         inp.clear()
#         inp.send_keys(number)
#         check = browser.find_element(By.ID, 'checkBtn')
#         check.click()
#         time.sleep(1)
#     time.sleep(1)
#     alert = browser.switch_to.alert
#     print(alert.text) # FD79-32DJ-79XB-124S-P3DX-2456-DFB-DSA9
#     time.sleep(1)
#     alert.accept()

    # Пареключится на iframe
    # browser.switch_to.frame(iframe)
    #
    # # Вернутся к базовому контенту страницы
    # browser.switch_to.default_content()

########################

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# import time
# from selenium.common.exceptions import NoAlertPresentException, UnexpectedAlertPresentException
#
#
# link ='https://parsinger.ru/selenium/5.8/5/index.html'
# # Измеряет время выполнения определенного участка кода.
# start = time.time()
#
# with webdriver.Chrome() as webdriver:
#     # Переходит по ссылке
#     webdriver.get(link)
#     # Убеждается что открыта искомая страница
#     time.sleep(1)
#
#     # Находит все iframe элементы внутри '#main_container'
#     iframe_elements = webdriver.find_elements(By.CSS_SELECTOR, '#main_container iframe')
#     # Проходит по всем iframe
#     for idx in range(len(iframe_elements)):
#         print(f"Processing iframe {idx + 1} out of {len(iframe_elements)}")
#
#         # Переключается в текущий iframe
#         webdriver.switch_to.frame(iframe_elements[idx])
#         # Находит и нажимает на кнопку
#         btn = webdriver.find_element(By.TAG_NAME, 'button').click()
#         # Получает текст из элемента с id 'numberDisplay'
#         text = webdriver.find_element(By.CSS_SELECTOR, '#numberDisplay').text
#         # Возвращается к основному контенту
#         webdriver.switch_to.default_content()
#         # Находит текстовое поле и вводит число
#         check_area = webdriver.find_element(By.CSS_SELECTOR, '#guessInput')
#         check_area.send_keys(int(text))
#         # Находит и нажимает на кнопку "checkBtn"
#         check_button = webdriver.find_element(By.CSS_SELECTOR, '#checkBtn').click()
#
#         # Ожидает появления алерта
#         time.sleep(.0001)  # Более адекватное время ожидания 1сек
#         try:
#             # Проверка, появился ли алерт
#             alert = webdriver.switch_to.alert
#             print("Ответ:", alert.text)
#             alert.accept()
#         except NoAlertPresentException:
#             # Если алерт не появился, очищает поле ввода
#             check_area.clear()
#         # Выходит из текущего iframe и продолжает с следующим
#         webdriver.switch_to.default_content()
#
# # Завершение отсчета времени
# end = time.time()
# print(f"Время выполнения: {end - start} секунд.")

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Открываем новые вкладки new_window

# import time
#
# from selenium import webdriver
# # from selenium.webdriver.common.by import By
# # from selenium.webdriver.support import expected_conditions as EC
# # from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('about:blank')
#     time.sleep(5)
#     browser.switch_to.new_window('tab')
#     browser.get('https://parsinger.ru/selenium/8/8.1/site1/') # 244434315352523523523523523563463999
#     time.sleep(5)
#     print('Число с сайта номер один', browser.title)
#     site1 = browser.title
#     print('эшкереееерререэшкере')
#     hi = [i for i in site1 if i not in '4, 3, 9']
#     num1 = "".join(hi)
#     print(num1) # ['2', '1', '5', '5', '2', '5', '2', '5', '2', '5', '2', '5', '2', '5', '2', '5', '6', '6']
#     browser.switch_to.new_window('tab')
#     browser.get('https://parsinger.ru/selenium/8/8.1/site2/')
#     time.sleep(5)
#     print('Число с сайта номер два', browser.title)
#     site2 = browser.title
#     print('эшкереееерререэшкере')
#     hu = [i for i in site2 if i not in '7, 8, 0']
#     num2 = "".join(hu)
#     print(num2)
#     print('эшкереееерререэшкере')
#     print(int(num1) + int(num2)) # 4135565044598459771911
    # print(browser.find_element(By.ID, 'result').text)

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Применяем window_handles.

# from selenium import webdriver
# from selenium.webdriver.chrome.service import Service
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# import time
#
# def solve_selenium_challenge():
#     """
#     Решает задачу с Selenium: открывает страницы, собирает числа, вводит сумму и получает пароль.
#     """
#
#     # 1. Запуск браузера и открытие главной страницы
#     service = Service(executable_path="./chromedriver")  # Укажите путь к вашему chromedriver
#     driver = webdriver.Chrome(service=service)
#     driver.get("http://parsinger.ru/selenium/5.9/1/")  # URL сайта-тренажера
#
#     # 2. Сбор ссылок и открытие в новых вкладках
#     links = driver.find_elements(By.TAG_NAME, "a")  # Находим все ссылки на странице
#     hrefs = [link.get_attribute("href") for link in links]  # Получаем значения атрибута href
#
#     # Открываем только первые 5 ссылок в новых вкладках
#     for href in hrefs[:5]:
#         driver.execute_script("window.open(arguments[0]);", href)
#
#     # Переключаемся на главную вкладку
#     driver.switch_to.window(driver.window_handles[0])
#
#     # 3. Сбор чисел и получение суммы
#     total_sum = 0
#     for handle in driver.window_handles[1:]:  # Проходим по всем открытым вкладкам (кроме главной)
#         driver.switch_to.window(handle)
#         time.sleep(3)  # Ожидаем 3 секунды, пока появятся числа
#
#         numbers = driver.find_elements(By.CLASS_NAME, "text")  # Находим элементы с классом "text"
#         #numbers = [element.text for element in numbers] # Получаем текст из каждого элемента (числа)
#
#         for number in numbers:
#             total_sum += int(number.text) #Прибавляем к total_sum значение каждого числа
#
#     # 4. Возврат на главную страницу и ввод суммы
#     driver.switch_to.window(driver.window_handles[0])  # Возвращаемся на главную страницу
#
#     input_field = driver.find_element(By.ID, "input_result")
#     input_field.send_keys(str(total_sum))  # Вводим сумму в поле
#
#     check_button = driver.find_element(By.ID, "check_result")
#     check_button.click()  # Нажимаем кнопку "Проверить"
#
#     # 5. Считывание пароля
#     password_element = WebDriverWait(driver, 10).until(
#         EC.visibility_of_element_located((By.ID, "result"))
#     )
#     password = password_element.text
#
#     driver.quit()  # Закрываем браузер
#
#     return password
#
#
# # Запуск решения и получение пароля
# password = solve_selenium_challenge()
# print(f"Пароль: {password}")
# # Вставьте пароль в поле на степике: "Здесь должен быть пароль"

################

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/8/8.1.2/index.html')
#     links = browser.find_elements(By.TAG_NAME, 'a')
#     hrefs = [i.get_attribute('href') for i in links]
#
#     for i in hrefs:
#         browser.execute_script('window.open(arguments[0]);', i)
#
#     browser.switch_to.window(browser.window_handles[0])
#     time.sleep(2)
#     count = 0
#     for i in browser.window_handles[1:]:
#         browser.switch_to.window(i)
#         time.sleep(3)
#         elements = browser.find_elements(By.CSS_SELECTOR, '[class="number"]')
#
#         for j in elements:
#             count += int(j.text)
#
#     print('count ====', count)
#
#     browser.switch_to.window(browser.window_handles[0])
#     sum_input = browser.find_element(By.ID, "sumInput")
#     time.sleep(3)
#     sum_input.send_keys(count)
#     browser.find_element(By.ID, "checkButton").click()
#     time.sleep(3)
#     print('password =====', browser.find_element(By.ID, "passwordDisplay").text) # Ваш пароль: TH3-G4T3S-0F-H3LL-4R3-0P3N

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Настраиваем размер окна.

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/8/8.2.1/index.html')
#     browser.set_window_size(1200, 720)
#     time.sleep(5)
#     browser.find_element(By.ID, "checkSizeBtn").click()
#     time.sleep(5)
#     print(browser.find_element(By.ID, "secret").text) # K2Z6-N9a7-B3Z8-jJ2Q

# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Сумма размеров окна браузера.

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/8/8.2.2/index.html')
#     sum = browser.get_window_size()['height'] + browser.get_window_size()['width'] # {'width': 1051, 'height': 806}
#     # print(browser.get_window_size()['height'] + browser.get_window_size()['width'])
#     time.sleep(5)
#     browser.find_element(By.ID, "answer").send_keys(sum)
#     browser.find_element(By.ID, "checkBtn").click()
#     print(browser.find_element(By.ID, "resultMessage").text) # Пароль: W1DTH-GETSIZE2025-HE1GHT

# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Ожидание title

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/expectations/3/index.html')
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable(browser.find_element(By.ID, "btn"))).click()
#
#     if WebDriverWait(browser, 25).until(EC.title_is('345FDG3245SFD')):
#         print(browser.find_element(By.ID, "result").text) # 82934401788.40141


# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Тайный заголовок

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/expectations/4/index.html')
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable(browser.find_element(By.ID,"btn"))).click()
#
#     if WebDriverWait(browser, 30).until(EC.title_contains('JK8HQ')):
#         print(browser.title) # 33GBK-98C3X-K8PKB-JK8HQ-DMXMQ


# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Мимолётные теги

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/expectations/6/index.html')
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable(browser.find_element(By.ID, "btn"))).click()
#
#     element = WebDriverWait(browser, 25).until(EC.presence_of_element_located((By.CLASS_NAME, "BMH21YY")))
#     print(element.text) # 688596737976



# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Охота на таинственный Блок

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.9/2/index.html')
#     WebDriverWait(browser, 30).until(EC.presence_of_element_located((By.ID, "qQm9y1rk"))).click()
#
#     time.sleep(2)
#     print(browser.switch_to.alert.text) # tlprcp6S-kDbhujKo-uh7Rv9f9-irv26iU9-Zt2XZcIm



# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Познание атрибута display

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# ids_to_find = ['xhkVEkgm', 'QCg2vOX7', '8KvuO5ja', 'CFoCZ3Ze', '8CiPCnNB', 'XuEMunrz',
#                'vmlzQ3gH', 'axhUiw2I','jolHZqD1', 'ZM6Ms3tw', '25a2X14r', 'aOSMX9tb',
#                'YySk7Ze3', 'QQK13iyY', 'j7kD7uIR']
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.9/3/index.html')
#
#     for i in ids_to_find:
#         # locator = browser.find_element(By.ID, f"{i}")
#         WebDriverWait(browser, 20).until(EC.visibility_of_element_located((By.ID, f"{i}"))).click()
#
#     time.sleep(2)
#     print(browser.switch_to.alert.text) # CFoCZ3Ze-8CiPCnNB-XuEMunrz-vmlzQ3gH-axhUiw2I-QQK13iyY-j7kD7uIR


# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Триумф над рекламным Заговором

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.9/4/index.html')
#     # class="close"
#     # onclick = "showSecretNumber()"
#     # id = "message"
#     browser.find_element(By.CSS_SELECTOR, '[class="close"]').click() # By.CSS_SELECTOR, '[onclick = "showSecretNumber()"]'
#     WebDriverWait(browser, 15).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '[class="close"]')))
#     browser.find_element(By.CSS_SELECTOR, '[onclick = "showSecretNumber()"]').click()
#     print(browser.find_element(By.ID, "message").text) # FS03-R9R3-SVV9-3P05-DSS1-01VI


# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Коллекционер секретных рун

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.9/5/index.html')
#     time.sleep(2)
#     # class="box_button"  их девять кнопок
#     # id = "close_ad" нажали на крестик и подождали
#     # id="ad_window" окно, сделать задержку пока не исчезнет
#     # class="box_button" появляется с задержкой
#
#     buttons = browser.find_elements(By.CSS_SELECTOR, '[class="box_button"]')
#     # print(len(buttons))
#     lst = []
#     for i in buttons:
#         WebDriverWait(browser, 10).until(EC.element_to_be_clickable(i)).click()
#         browser.find_element(By.ID, "close_ad").click()
#
#         time.sleep(7)
#         if i.text > '0':
#             lst.append(i.text)
#     print(lst) # ['F34S', 'FFS3', '56FGH', 'LKJ0', '2E9D', '440D', '4Q0D', '230S', 'D120']
#     key = '-'.join(lst)
#     print(key) # F34S-FFS3-56FGH-LKJ0-2E9D-440D-4Q0D-230S-D120

# lst = ['F34S', 'FFS3', '56FGH', 'LKJ0', '2E9D', '440D', '4Q0D', '230S', 'D120']
#
# key = '-'.join(lst)
# print(key) # F34S-FFS3-56FGH-LKJ0-2E9D-440D-4Q0D-230S-D120

###############

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.wait import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get("https://parsinger.ru/selenium/5.9/5/index.html")
#     result = []
#     for btn in browser.find_elements(By.CSS_SELECTOR, ".box_button"):
#         btn.click()
#         WebDriverWait(browser, 60).until(EC.presence_of_element_located((By.CSS_SELECTOR, "#close_ad"))).click()
#         while not btn.text:
#             pass
#         result.append(btn.text)
#     print("-".join(result))

###############

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
# import time
#
# with webdriver.Chrome() as browser:
#     out = []
#     browser.get('https://parsinger.ru/selenium/5.9/5/index.html')
#     for element in browser.find_elements(By.CLASS_NAME, 'box_button'):
#         element.click()
#         WebDriverWait(browser, 20).until(EC.element_to_be_clickable((By.ID, 'close_ad'))).click()
#         if WebDriverWait(browser, 20).until(EC.invisibility_of_element_located((By.ID, 'ad_window'))):
#             while len(element.text) == 0:
#                 time.sleep(0.1)
#             out.append(element.text)
#     print('-'.join(out))

###############

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# list = []
#
# with webdriver.Chrome() as browser:
#     weit = WebDriverWait(browser, 10)
#     browser.get('https://parsinger.ru/selenium/5.9/5/index.html')
#     data_index = browser.find_elements(By.CLASS_NAME, 'box_button')
#     for i in data_index:
#         index = int(i.get_attribute('data-index'))
#         #клик по квадратику когда он доступен
#         weit.until(EC.element_to_be_clickable((By.XPATH, f'.//div[@data-index = {index}]'))).click()
#         #клик по крестику когда он доступен
#         weit.until(EC.element_to_be_clickable((By.ID, 'close_ad'))).click()
#         #реклама ушла
#         weit.until(EC.text_to_be_present_in_element_attribute((By.ID, 'ad_window'), 'style', 'display: none; opacity: 1;'))
#         list.append(i.text)
#     print('-'.join(x for x in list))

###############
# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Мерцающий Чек Бокс Мистерии

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/5.9/6/index.html')
#     # id = "overlay" нужно чтобы чек-бокс был активен type="checkbox"
#     # onclick = "checkCheckbox()" Кнопка проверить
#     # id = "result" считать результат # 34D0-3SCV-SCM0-654R-DVM9-42IU
#     if WebDriverWait(browser, 10).until(EC.element_to_be_selected(browser.find_element(By.CSS_SELECTOR, '[type="checkbox"]'))):
#         browser.find_element(By.CSS_SELECTOR, '[onclick="checkCheckbox()"]').click()
#         print(browser.find_element(By.ID, "result").text) # 34D0-3SCV-SCM0-654R-DVM9-42IU



# ===============================================================================

# Решение задания из блока "Ожидания явные и неявные"  Гирлянда чекбоксов


# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     wait = WebDriverWait(browser, 10)
#     browser.get('https://parsinger.ru/selenium/5.9/7/index.html')
#     containers = browser.find_elements(By.CSS_SELECTOR, '[class="overlay"]')
#     # print(len(containers))
#     coun = 0
#     for i in containers:
#         if wait.until(EC.element_to_be_selected(browser.find_element(By.CSS_SELECTOR, '[type="checkbox"]'))):
#             browser.find_element(By.TAG_NAME, 'button').click()
#             coun += 1
#             if coun == 20:
#                 break
#     print(browser.find_element(By.ID, "result").text) # GFD9-3SV0-3280-WEZC-23UN-Q921-3G5D



# ===============================================================================

# Решение задания из блока "Окна и вкладки"  Модальные окна.

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/8/8.3.1/index.html')
#     # id = "alertButton"
#     # id = "promptButton"
#     # id = "confirmButton"
#     # id = "secretKey"
#     browser.find_element(By.ID, "alertButton").click()
#     time.sleep(1)
#     browser.switch_to.alert.accept()
#     browser.find_element(By.ID, "promptButton").click()
#     time.sleep(1)
#     alert = browser.switch_to.alert
#     time.sleep(1)
#     alert.send_keys('Alert')
#     alert.accept()
#     browser.find_element(By.ID, "confirmButton").click()
#     time.sleep(1)
#     browser.switch_to.alert.accept()
#     time.sleep(5)
#     print(browser.find_element(By.ID, "secretKey").text) # ПАРОЛЬ: @L3RT-1T-1S-3ASY



# ===============================================================================

# Решение задания из блока "Drag and drop"  Определите координаты

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
#
# with webdriver.Chrome() as driver:
#     # Ожидание загрузки элементов (10 секунд)
#     driver.implicitly_wait(10)
#
#     # Открытие локальной HTML страницы
#     driver.get("https://parsinger.ru/selenium/5.10/9/index.html")
#
#     # Поиск элемента (квадрата) на странице
#     square = driver.find_element(By.CSS_SELECTOR, "canvas")
#
#     # Создание объекта ActionChains для выполнения действий с элементами
#     actions = ActionChains(driver)
#
#     # Передвижение квадрата на указанные координаты
#     actions.click_and_hold(square).move_by_offset(100, -100).release().perform()
#
#     # Пауза для визуальной проверки результата
#     time.sleep(5)


# ===============================================================================

# Решение задания из блока "Drag and drop"  Перемещение красного блока и поиск секретного токена

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
#
# from selenium.webdriver.support.expected_conditions import element_to_be_clickable
#
# with webdriver.Chrome() as browser:
#     # Ожидание загрузки элементов (10 секунд)
#     browser.implicitly_wait(10)
#
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/draganddrop/1/index.html")
#
#     # Поиск квадрата на странице
#     square = browser.find_element(By.ID, "field1")
#
#     # Поиск цели, куда переносить квардрат
#     target = browser.find_element(By.ID, "field2")
#
#     # Создаем экземпляр класса ActionChains
#     actions = ActionChains(browser)
#
#     # Выполняем действие перетаскивания
#     actions.drag_and_drop(square, target).perform()
#
#     time.sleep(5)
#
#     # Печатаем результат
#     print(browser.find_element(By.ID,"result").text) # ODYzNDQ1MzM0NTE0MzQ2OTAwMA==


# ===============================================================================

# Решение задания из блока "Drag and drop"  Путешествие квадрата и проверочные точки

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
#

#
# with webdriver.Chrome() as browser:
#     # Устанавливаем неявное ожидание для всех элементов
#     # Ожидание загрузки элементов (10 секунд)
#     browser.implicitly_wait(10)
#
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/draganddrop/3/index.html")
#
#     time.sleep(2)
#     element = browser.find_element(By.ID, "block1")
#
#     actions = ActionChains(browser)
#     for i in range(5):
#         actions.drag_and_drop_by_offset(element, 50, 0).perform()
#
#     time.sleep(5)
#     print(browser.find_element(By.ID, "message").text) # Ni44NTc4MTk2NzY4NTQ0NTZlKzIz


# ===============================================================================

# Решение задания из блока "Drag and drop"  Движение зелёных квадратов

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
#
#
# with webdriver.Chrome() as browser:
#     # Устанавливаем неявное ожидание для всех элементов
#     # Ожидание загрузки элементов (10 секунд)
#     browser.implicitly_wait(10)
#
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/selenium/5.10/2/index.html")
#     actions = ActionChains(browser)
#     for i in range(1, 11):
#         square = browser.find_element(By.ID, f"draganddrop{i}")
#         actions.drag_and_drop_by_offset(square, 1000, 0).perform()
#
#     print(browser.find_element(By.ID, "message").text) # 39FG-3490-34F0-944S-34FV-80VX-F3GJ-349B


# ===============================================================================

# Решение задания из блока "Окна и вкладки"   Работа с iFrame.

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# import re
#
# with webdriver.Chrome() as browser:
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/selenium/8/8.4.1/")
#     iframe = browser.find_element(By.CSS_SELECTOR, '[src="iframe_content.html"]')
#     browser.switch_to.frame(iframe)
#     iframe_content = browser.page_source
#     matches = re.findall(r'\*(.*?)\*', iframe_content)
#     frameMaster = ''.join(matches)
#     print(frameMaster) # FrameMaster

# ===============================================================================

# Решение задания из блока "Drag and drop"   Путешествие квадрата

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
#
#
# with webdriver.Chrome() as browser:
#     # Устанавливаем неявное ожидание для всех элементов
#     # Ожидание загрузки элементов (10 секунд)
#     browser.implicitly_wait(10)
#
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/draganddrop/2/index.html")
#     # id = "draggable" moving the square
#     # id = "box1"
#     # id = "message" rezult
#     square = browser.find_element(By.ID, "draggable")
#     boxes = browser.find_elements(By.CSS_SELECTOR, '[class="box"]')
#     for i in boxes:
#         ActionChains(browser).click_and_hold(square).move_to_element(i).release().perform()
#
#     print(browser.find_element(By.ID, "message").text) # NS4zNDUzMzU0NTQ2MzU0NDVlKzIx


# ===============================================================================

# Решение задания из блока "Drag and drop"   Найдите пару

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
# from selenium.webdriver.support.color import Color
#
# with webdriver.Chrome() as browser:
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/selenium/5.10/3/index.html")
#     square = browser.find_elements(By.CSS_SELECTOR,'[class="draganddrop ui-draggable ui-draggable-handle"]')
#
#     target_area = browser.find_elements(By.CSS_SELECTOR,'[class="draganddrop_end"]')
#
#     # color_square = Color.from_string(square.value_of_css_property('background-color')).rgb
#     # color_target_area = Color.from_string(target_area.value_of_css_property('background-color')).rgb
#     # time.sleep(5)
#     # if color_square == color_target_area:
#     #     ActionChains(browser).click_and_hold(square).move_to_element(target_area).release().perform()
#     time.sleep(2)
#     # print(len(square))
#     # print(len(target_area))
#     for i in square:
#         color_square = Color.from_string(i.value_of_css_property('background-color')).rgb
#     #     print(color_square)
#         for j in target_area:
#         # print(j.text)
#             color_target_area = Color.from_string(j.value_of_css_property('border-color')).rgb
#         # print(color_target_area)
#             if color_square in color_target_area:
#                 # ActionChains(browser).click_and_hold(i).move_to_element(j).release().perform()
#                 ActionChains(browser).drag_and_drop(i, j).perform()
#                 time.sleep(1)
#         # print(color)
#     time.sleep(5)
#     print(browser.find_element(By.ID, "message").text) # F934-3902-2FH4-DV02-3454-9HCX-4F53-12FS

# ===============================================================================
# driver.maximize_window() перед или после driver.get(url), развернет окно в полноэкранный режим и вопрос решен
# ===============================================================================

# Решение задания из блока "Drag and drop"   Автоматическая сортировка шариков

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
# from selenium.webdriver.support.color import Color
#
# with webdriver.Chrome() as browser:
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/selenium/5.10/4/index.html")
#     # class ="ball_color red_ball ui-draggable ui-draggable-handle" Шарики
#     # class="basket_color red ui-droppable" Контейнеры
#     balloons = browser.find_elements(By.CSS_SELECTOR, ".ball_color.ui-draggable")
#     containers = browser.find_elements(By.CSS_SELECTOR, ".basket_color.ui-droppable")
#     print(len(balloons))
#     # print(len(containers))
#     for i in balloons:
#         color_balloons = Color.from_string(i.value_of_css_property('background-color')).rgb
#         for j in containers:
#             color_containers = Color.from_string(j.value_of_css_property('background-color')).rgb
#             # print(color_containers)
#             if color_balloons in color_containers:
#                 ActionChains(browser).drag_and_drop(i, j).perform()
#         # print(balloons)
#     time.sleep(4)
#     print(browser.find_element(By.CSS_SELECTOR, '[class="message"]').text) # ER96-SVN0-34HX-ER3W-WHJ5-WHG4-SNJ1-12LO


# ===============================================================================
# Решение задания из блока "Drag and drop"   Бросок на правильное расстояние

# from selenium import webdriver
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.common.by import By
# import time
# start_time = time.time()
# with webdriver.Chrome() as browser:
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/selenium/5.10/8/index.html")
#
#     squares = browser.find_elements(By.CSS_SELECTOR, '[class ="piece ui-draggable ui-draggable-handle"]')
#     # gardens = browser.find_elements(By.CSS_SELECTOR, '[class ="range ui-droppable"]')
#     sad = browser.find_element(By.ID, "main_container")
#     gardens = sad.find_elements(By.TAG_NAME, 'p')
#     # print(len(squares))
#     # print(len(gardens))
#
#     pixels = [i.text for i in gardens]
#     # print(pixels)
#     px = [int(i.split(': ')[1][:3]) for i in pixels]
#     print(px)
#     y = 0
#     for i, pox in zip(squares, px):
#         ActionChains(browser).drag_and_drop_by_offset(i, pox, y).perform()
#     # time.sleep(4)
#     print(browser.find_element(By.ID, "message").text) # GD60-34JX-354F-3HJC-NXC0-54KO-W3B1-2DFH-23JG
# end_time = time.time()
# finish = end_time - start_time
# print('Время выполнения программы: ', finish)
################
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.common.action_chains import ActionChains
# from time import sleep
#
#
# with webdriver.Chrome() as driver:
#     driver.get("https://parsinger.ru/selenium/5.10/8/index.html")
#     sleep(3)
#     bul = driver.find_elements(By.CSS_SELECTOR, "#pieces_container > div")
#     tar = driver.find_elements(By.CSS_SELECTOR, "#main_container > div")
#     actions = ActionChains(driver)
#     for bullit, target in zip(bul, tar):
#         actions.drag_and_drop(bullit, target).perform()
#         sleep(1)
#     print(WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, "message"))).text)


# ===============================================================================
# Решение задания из блока "Drag and drop"   Движение слайдеров и тайный код

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver import Keys
# import time
# 
# 
# with webdriver.Chrome() as browser:
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/selenium/5.10/6/index.html")
#     # class ="volume-slider"
#     # class ="target-value"
#     # id = "message"
#     slider = browser.find_elements(By.CSS_SELECTOR, '[class ="volume-slider"]')
#     target_value = browser.find_elements(By.CSS_SELECTOR, '[class ="target-value"]')
# 
#     for i, num in zip(slider, target_value):
#         # Получить текущее значение слайдера
#         current_val = int(i.get_attribute("value"))
#         target_value = int(num.text)
# 
#         while current_val != target_value:
#             if current_val > target_value:
#                 # Уменьшаем значение
#                 i.send_keys(Keys.ARROW_LEFT)
#                 current_val = int(i.get_attribute("value"))
#             elif current_val < target_value:
#                 # Увеличиваем значение
#                 i.send_keys(Keys.ARROW_RIGHT)
#                 current_val = int(i.get_attribute("value"))
#         # time.sleep(0.3)
# 
#     time.sleep(3)
#     print(browser.find_element(By.ID, "message").text) # 3F9D-DVB0-EH46-96VB-JHJ5-34UK-2SSF-JKG0

################

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver import Keys
#
#
# # Функция для ожидания загрузки элемента
# def wait_for_element(browser, locator, timeout=10):
#     return WebDriverWait(browser, timeout).until(
#         EC.presence_of_element_located(locator)
#     )
#
#
# with webdriver.Chrome() as browser:
#     # Открытие локальной HTML страницы
#     browser.get("https://parsinger.ru/selenium/5.10/6/index.html")
#
#     # Определение всех ползунков и целевых значений
#     sliders = browser.find_elements(By.CSS_SELECTOR, '[class ="volume-slider"]')
#     target_values = browser.find_elements(By.CSS_SELECTOR, '[class ="target-value"]')
#
#     # Обработка каждого ползунка отдельно
#     for slider, target_value_element in zip(sliders, target_values):
#         # Получение текущего значения ползунка
#         current_value = int(slider.get_attribute('value'))
#
#         # Преобразование текста в целевое значение
#         target_value = int(target_value_element.text)  # Получаем текст из элемента target_value
#
#         # Установка значения ползунка через JavaScript
#         while current_value != target_value:
#             if current_value > target_value:
#                 slider.send_keys(Keys.ARROW_LEFT)
#                 current_value = int(slider.get_attribute('value'))  # Обновляем current_value
#             elif current_value < target_value:
#                 slider.send_keys(Keys.ARROW_RIGHT)
#                 current_value = int(slider.get_attribute('value'))  # Обновляем current_value
#
#     # Проверяем результат
#     wait_for_element(browser, (By.ID, "message"), timeout=10)  # Ожидаем появления сообщения
#     print(browser.find_element(By.ID, "message").text) # 3F9D-DVB0-EH46-96VB-JHJ5-34UK-2SSF-JKG0

# =======================================================
# тема 8  "Окна и вкладки" задача: "Туда и обратно."

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/8/8.4.2/index.html')
#     # id="frame1"
#     # class="unlock-button" button
#
#     for i in range(1, 5):
#         frames = browser.find_element(By.ID, f'frame{i}')
#         browser.switch_to.frame(frames)
#         print('Фрейм № ', i)
#
#         if i < 4:
#             browser.find_element(By.CSS_SELECTOR, '[class="unlock-button"]').click()
#             time.sleep(2)
#         else:
#             print('Password: ', browser.find_element(By.XPATH, '/html/body/h2').text)
#             #  ACCESS GRANTED YOUR PASSWORD: TH3-M4TR1X-H4S-C0NTR0LL3D-Y0U
#         browser.switch_to.default_content()


# =======================================================

# тема 8  "Окна и вкладки" задача: "Вложенные iframes: путь вглубь… 🌀"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/8/8.4.3/index.html')
#     # src = "spiral_1/index.html"
#     # class ="button"
#     # class="password-container"
#
#     for i in range(4):
#         frame = browser.find_element(By.TAG_NAME, "iframe")
#         browser.switch_to.frame(frame)
#         browser.find_element(By.CSS_SELECTOR, '[class ="button"]').click()
#         time.sleep(1)
#     print(browser.find_element(By.CSS_SELECTOR, '[class="password-container"]').text) # IM-IFRAME-N1NJ4


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "⏳ Явные ожидания"

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.1.1/index.html')
#
#     for i in range(1, 5):
#         element = WebDriverWait(browser, 12).until(EC.element_to_be_clickable((By.ID, f"button{i}"))).click()
#
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, "finalButton"))).click()
#
#     print(browser.find_element(By.ID,"message").text) # Secret Password: CL1CK-N0W-0R-N3V3R


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "📡 Сканирование доступа – ожидание title"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.2.1/index.html')
#     #  button class="cyber-button__text"
#     time.sleep(2)
#     button = browser.find_element(By.CSS_SELECTOR, '[class="cyber-button__text"]')
#     button.click()
#     WebDriverWait(browser, 25).until(EC.title_is("Access Granted"))
#     # time.sleep(2)
#     print(browser.find_element(By.ID, "passwordValue").text) # SYSTEM PASSWORD: H4CK3R_42


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Implicit waits ABCDE."

# from selenium.webdriver.common.by import By
# from selenium import webdriver
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/selenium/9/9.3.1/index.html')
#     # button id="startButton"
#     # button id="dynamicButton"
#     # Password id="secretPassword"
#
#     browser.implicitly_wait(7)
#     button = browser.find_element(By.ID, "startButton")
#     button.click()
#     for i in range(1, 6):
#         dynamic_buttons = browser.find_element(By.ID, "dynamicButton")
#         dynamic_buttons.click()
#
#     print(browser.find_element(By.ID, "secretPassword").text) # Пароль: W41T-4S-L0NG-4S-U-W4NT



# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Точный URL – ключ к успеху! 🔑"

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.4.3/index.html')
#
#     button = browser.find_element(By.XPATH, '/html/body/div/a[5]')
#     if 'Правильный путь' in button.text:
#         button.click()
#
#     if WebDriverWait(browser, 10).until(EC.url_to_be('https://parsinger.ru/selenium/9/9.4.3/final.html?key=secure')):
#         print(browser.find_element(By.ID, "password").text) # SECURE-URL-2025
#################################
# import time
# from seleniumwire import webdriver
# from webdriver_manager.chrome import ChromeDriverManager
# from selenium.webdriver.chrome.service import Service as ChromiumService
# from seleniumwire import undetected_chromedriver as uc
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
# from fake_useragent import UserAgent
# from proxy_list import proxy_list
# from tqdm import tqdm
#
# # Автоматическое обновление драйвера браузера хром
#
# # список моих прокси: импортируются из файла proxy_list
# print('proxy_list =', proxy_list)
# proxy = proxy_list[0]
#
# url = r'https://parsinger.ru/selenium/9/9.4.3/index.html'
# url_final = r'https://parsinger.ru/selenium/9/9.4.3/final.html?key=secure'
#
# # Создание объекта ChromeOptions
# options_chrome = webdriver.ChromeOptions()
# # Добавление аргументов командной строки
# options_chrome.add_argument('--start-maximized')  # максимальный размер окна для браузера
# # options_chrome.add_argument("--headless=new")  # фоновый режим работы
# # options_chrome.add_argument('--disable-client-side-phishing-detection')  # Отключает обнаружение фишинга на клиентской стороне
# # options_chrome.add_argument('--disable-cache')  # Отключает кэш браузера
# # options_chrome.add_argument("--disable-blink-features=AutomationControlled")
# # options_chrome.add_argument('--disable-infobars')
# options_chrome.add_argument(f'user-agent={UserAgent().random}')  # добавление аргумента Fake User-Agent
# Service = ChromiumService(ChromeDriverManager().install())  # установка последней версии драйвера хром
# # подключаем прокси - seleniumwire_options=proxy, подключаем все опции - options=driver_options
# # Инициализация драйвера Chrome с указанными опциями
# with (webdriver.Chrome(service=Service, seleniumwire_options=proxy, options=options_chrome) as browser):
#     # Получаем текущий User-Agent через JavaScript
#     current_user_agent = browser.execute_script("return navigator.userAgent;")
#     print(f"Текущий User-Agent: {current_user_agent}")  # печатаем User-Agent
#     print(f"Текущий proxy: {browser.proxy}")  # печатаем прокси
#     browser.get(url)
#     time.sleep(1)
#
#     print(f'Текущий адрес страницы до клика: {browser.current_url}')
#     # Находим последнюю кнопку и кликаем на нее
#     botton_last = browser.find_element(By.LINK_TEXT, 'Правильный путь').click()
#     time.sleep(1)
#     url_after_click = browser.current_url
#     print(f'Текущий адрес страницы после клика: {url_after_click}')
#     try:
#         # Ожидание, пока URL станет равно url_final
#         element = WebDriverWait(browser, 10).until(EC.url_to_be(url_final))
#         if element:
#             print(f'На странице: {url_after_click} произошло изменение адреса страницы на заданное значение')
#             # Переходим на текущую страницу
#             print(f'Текущая страница после изменения: {browser.current_url}')
#             # browser.get(browser.current_url)
#             # time.sleep(1)
#             locator = (By.ID, 'password')
#             password = WebDriverWait(browser, 10).until(EC.visibility_of_element_located(locator))
#             if password:
#                 print(password.text)
#     except Exception as e:
#         print(e)
#
#     btn = browser.find_element(By.CSS_SELECTOR, 'a.btn').click()
#     time.sleep(1)
#
# '''
# Текущий адрес страницы до клика: https://parsinger.ru/selenium/9/9.4.3/index.html
# Текущий адрес страницы после клика: https://parsinger.ru/selenium/9/9.4.3/final.html?loading=1
# На странице: https://parsinger.ru/selenium/9/9.4.3/final.html?loading=1 произошло изменение адреса страницы на заданное значение
# Текущая страница после изменения: https://parsinger.ru/selenium/9/9.4.3/final.html?key=secure
# SECURE-URL-2025
# '''



# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Отследите изменение URL и получите пароль! 🔄"

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.4.4/index.html')
#     # button class="btn"
#     # password id="password"
#     button = browser.find_element(By.CSS_SELECTOR, '[class="btn"]')
#     button.click()
#     current_url = browser.current_url
#     WebDriverWait(browser, 10).until(EC.url_changes(current_url))
#     print(browser.find_element(By.ID, "password").text) # Ваш пароль: URL_CHANGED_2025


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Абу и бананы 🍌"

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('http://parsinger.ru/selenium/9/9.4.1/3VT6JyXnI7EQqG0632xSAQyD4Z.html')
#
#     while True:
#         browser.find_element(By.LINK_TEXT, 'Искать бананы').click()
#
#         try:
#             WebDriverWait(browser, 5).until(EC.url_contains("qLChv49"))
#             # browser.find_element(By.LINK_TEXT, 'Проверить улов').click()
#             browser.find_element(By.ID, 'checkButton').click()
#             print(browser.find_element(By.TAG_NAME, 'p').text)
#             break
#         except Exception as e:
#             print(f"Ошибка: {e}. Продолжаем поиск...") # Ура вы нашли бананы, ваш пароль: N0-M0R3-HUNGRY-M0NK3Y
#             continue


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Охота за числами 🔢"


# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.4.2/index.html')
#     # startButton id="startButton"
#     # number class="number"
#     # Введите число id="sumInput"
#     # Проверить id="checkButton"
#
#     total_sum = 0
#     browser.find_element(By.ID, "startButton").click()
#     while True:
#
#         try:
#             WebDriverWait(browser, 10).until(EC.url_matches(r'^https://parsinger\.ru/selenium/9/9\.4\.2/ok/ok_\d+\.html$'))
#             number_element = browser.find_element(By.CLASS_NAME, "number")
#             number = int(number_element.text)
#             total_sum += number
#             current_url = browser.current_url
#             WebDriverWait(browser, 5).until(EC.url_changes(current_url))
#
#         except:
#             if "index_2" in browser.current_url:
#                 browser.find_element(By.ID, "sumInput").send_keys(total_sum)
#                 browser.find_element(By.ID, "checkButton").click()
#                 print(browser.find_element(By.ID, "result").text)
#                 # time.sleep(2)
#                 break


# 23451 90123 43210 78901 89234 12567 45678 56789 67890
# 34521
# 542364
# Ваш пароль: AbcD123XyZ

#####################################

# import time
# from selenium import webdriver
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     index_url = "https://parsinger.ru/selenium/9/9.4.2/index.html"
#     browser.get(index_url)
#     start_btn = browser.find_element(By.CLASS_NAME, "button-text")
#     start_btn.click()
#     pattern = r"^https://parsinger\.ru/selenium/9/9\.4\.2/ok/ok_\d+\.html$"
#     sum_of_nums = 0
#     while True:
#         try:
#             WebDriverWait(browser, 0.6).until(EC.url_matches(pattern))
#             num = browser.find_element(By.CLASS_NAME, "number").text
#             sum_of_nums += int(num)
#             curret_url = browser.current_url
#             WebDriverWait(browser, 2).until(EC.url_changes(curret_url))
#
#         except:
#             if browser.current_url == "https://parsinger.ru/selenium/9/9.4.2/index_2.html":
#                 browser.find_element(By.ID, "sumInput").send_keys(sum_of_nums)
#                 browser.find_element(By.ID, "checkButton").click()
#
#                 print(browser.find_element(By.ID, "result").text) # Поздравляем! Ваш пароль: AbcD123XyZ
#
#                 time.sleep(2)
#                 break
#
#     print(sum_of_nums)


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "А есть ли элемент в DOM 🏠?"

# from selenium import webdriver
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.common.by import By
#
# with webdriver.Chrome() as browser:
#     browser.get("https://parsinger.ru/selenium/9/9.5.1/index.html")
#
#     WebDriverWait(browser, 20).until(EC.presence_of_element_located((By.ID, "order-number")))
#
#     print(browser.find_element(By.ID, "order-number").text) # Номер заказа: TR07NGM19XTR07NGM19X

####################################

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.5.1/index.html')
#     locator = (By.ID, 'order-number')
#     WebDriverWait(browser, timeout=10).until(EC.presence_of_element_located(locator))
#     print(browser.find_element(*locator).text)


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Кнопка-призрак 👻"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.5.2/index.html')
#     # id="ghost-button"
#     # id="password-display"
#     WebDriverWait(browser, 5).until(EC.visibility_of_element_located((By.ID, "ghost-button"))).click()
#     time.sleep(2)
#     print(browser.find_element(By.ID, "password-display").text) # Пароль: 1234


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "🛒⏳ Терпеливый покупатель: ждем загрузки товаров."

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.5.3/index.html')
#     # id="showProducts"
#     # class="price"
#     # id="sumInput"
#     # id="checkSum"
#     # id = "secretMessage"
#
#     browser.find_element(By.ID, "showProducts").click()
#
#     price = WebDriverWait(browser, 5).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, '[class="price"]')))
#     # print('len(price)=', len(price))
#     summa = [i.text.split('$')[1] for i in price]
#     # print('summa=', summa) # 9391
#     su_price = [int(i.replace(',', '')) for i in summa]
#     # print('su_price=', su_price)
#     # print('sum(su_price)=', sum(su_price))
#     # pri = ['1,299', '999', '349', '749', '499', '249', '4999', '99', '149']
#     browser.find_element(By.ID, "sumInput").send_keys(str(sum(su_price)))
#     browser.find_element(By.ID, "checkSum").click()
#
#     print(WebDriverWait(browser, 10).until(EC.visibility_of_element_located((By.ID, "secretMessage"))).text) # S56P-8B0D-D3B4-PR1V

#########################################

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.5.3/index.html')
#     browser.find_element(By.ID, 'showProducts').click()
#     WebDriverWait(browser, timeout=10).until(EC.visibility_of_all_elements_located((By.CLASS_NAME, 'product')))
#     total = sum(int(x.text[1:].strip().replace(',', '')) for x in browser.find_elements(By.CLASS_NAME, 'price'))
#     browser.find_element(By.ID, 'sumInput').send_keys(total)
#     browser.find_element(By.ID, 'checkSum').click()
#     print(WebDriverWait(browser, timeout=1).until(EC.visibility_of_element_located((By.ID, 'secretMessage'))).text)


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Мониторинг курса валют 📈"


# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.6.1/index.html')
#     # id = "usd-rate"
#     # id = "secret-code"
#     WebDriverWait(browser, 35).until(EC.text_to_be_present_in_element((By.ID, "usd-rate"), "75.50 ₽"))
#     print(WebDriverWait(browser, 35).until(EC.visibility_of_element_located((By.ID, "secret-code"))).text) # FOREX_HUNTER_2025


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: " Забытый рецепт 🧪"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.6.2/index.html')
#     # id = "ask-jaskier"
#     # id = "recipe_field"
#     browser.find_element(By.ID, "ask-jaskier").click()
#     WebDriverWait(browser, 35).until(EC.text_to_be_present_in_element_value((By.ID, "recipe_field"), "Селениумий"))
#     print(WebDriverWait(browser, 35).until(EC.visibility_of_element_located((By.ID, "password"))).text) # КаэрМорхен1258


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "🔥 Активация нанокостюма: докажи, что ты достойный! 🦾"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.6.3/index.html')
#     WebDriverWait(browser,15).until(EC.text_to_be_present_in_element_attribute((By.ID, "main-image"), 'src', 'success'))
#     browser.find_element(By.ID, "main-image").click()
#     time.sleep(3)
#     print(browser.find_element(By.ID, "password-section").text) # Нанокостюм активирован! Код доступа: ARC-R34CT0R-P0W3R


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "🔥 Миссия "Подтверждение бронирования": докажи, что ты мастер ожидания! 🧙‍♂"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.6.4/index.html')
#     # id = "booking-number"
#     # id="booking-input"
#     # id="check-button"
#     # id="secret-password"
#     WebDriverWait(browser, 15).until(
#         EC.element_attribute_to_include((By.ID, "booking-number"), "confirmed"))
#     browser.find_element(By.ID, "booking-input").send_keys(browser.find_element(By.ID, "booking-number").text)
#     browser.find_element(By.ID, "check-button").click()
#     time.sleep(3)
#     print(browser.find_element(By.ID, "secret-password").text)
    # Секретный пароль:
    # SELENIUM_WAIT_MASTER
    # Поздравляем! Вы успешно использовали element_attribute_to_include()


# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Оформление заказа с многоступенчатой загрузкой 🛒"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import Select
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.7.1/index.html')
#     # input id = "address"
#     # select id="payment"
#     # button id="submit-order"
#     # spinner class="spinner-circle"
#     # id = "get-code"
#     # id = "result"
#     browser.find_element(By.ID, "address").send_keys("booking-number")
#     select = Select(browser.find_element(By.ID, "payment"))
#     options = select.options
#     option = [i.click() for i in options][1]
#     browser.find_element(By.ID, "submit-order").click()
#     WebDriverWait(browser, 10).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '[class="spinner-circle"]')))
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, "confirm-address"))).click()
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, "get-code"))).click()
#     print(browser.find_element(By.ID, "result").text) # 5TR4NG3R-D3M0G0N-001
#     time.sleep(3)


###########################
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# import time
#
# url = "https://parsinger.ru/selenium/9/9.7.1/index.html"
#
# with webdriver.Chrome() as browser:
#     try:
#         # Открытие страницы тренажера
#         print("Открываем страницу тренажера...")
#         browser.get(url)
#
#         # Создание объекта ожидания
#         wait = WebDriverWait(browser, 10)
#
#         # Ожидание загрузки страницы
#         wait.until(EC.presence_of_element_located((By.ID, "address")))
#
#         # Заполнение формы
#         print("Заполняем форму...")
#         address_input = browser.find_element(By.ID, "address")
#         address_input.send_keys("ул. Примерная, д. 123")
#
#         # Выбор способа оплаты
#         print("Выбираем способ оплаты...")
#         payment_option = browser.find_element(By.CSS_SELECTOR, "#payment option[value='card']")
#         payment_option.click()
#
#         # Нажатие кнопки "Подтвердить заказ"
#         print("Нажимаем кнопку 'Подтвердить заказ'...")
#         submit_button = wait.until(EC.element_to_be_clickable((By.ID, "submit-order")))
#         submit_button.click()
#
#         # Ожидание появления спиннера
#         print("Ожидаем появления спиннера...")
#         spinner = wait.until(EC.visibility_of_element_located((By.ID, "spinner")))
#
#         # Ожидание исчезновения спиннера
#         print("Ожидаем исчезновения спиннера...")
#         wait.until(EC.invisibility_of_element_located((By.ID, "spinner")))
#
#         # Ожидание появления модального окна
#         print("Ожидаем появления модального окна...")
#         modal = wait.until(EC.visibility_of_element_located((By.ID, "modal")))
#
#         # Проверка адреса в модальном окне
#         address_confirm = browser.find_element(By.ID, "address-confirm").text
#         print(f"Подтверждаем адрес: {address_confirm}")
#
#         # Нажатие кнопки "Да" в модальном окне
#         print("Нажимаем кнопку 'Да'...")
#         confirm_button = wait.until(EC.element_to_be_clickable((By.ID, "confirm-address")))
#         confirm_button.click()
#
#         # Ожидание исчезновения модального окна
#         print("Ожидаем исчезновения модального окна...")
#         wait.until(EC.invisibility_of_element_located((By.ID, "modal")))
#
#         # Ожидание появления кнопки "Получить код подтверждения"
#         print("Ожидаем появления кнопки 'Получить код подтверждения'...")
#         get_code_button = wait.until(EC.visibility_of_element_located((By.ID, "get-code")))
#
#         # Нажатие кнопки "Получить код подтверждения"
#         print("Нажимаем кнопку 'Получить код подтверждения'...")
#         get_code_button.click()
#
#         # Ожидание появления результата
#         print("Ожидаем появления результата...")
#         result = wait.until(EC.visibility_of_element_located((By.ID, "result")))
#
#         # Получение пароля
#         password = result.text
#         print(f"Получен пароль: {password}")
#
#         # Небольшая пауза, чтобы увидеть результат
#         time.sleep(3)
#
#         print("Тест успешно завершен!")
#
#     except Exception as e:
#         print(f"Произошла ошибка: {e}")

##########################

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support.ui import Select
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.7.1/index.html')
#     browser.find_element(By.ID, 'address').send_keys('qwerty')
#     Select(browser.find_element(By.ID, 'payment')).select_by_value("card")
#     browser.find_element(By.ID, 'submit-order').click()
#     WebDriverWait(browser, 10).until(EC.invisibility_of_element_located((By.CLASS_NAME, 'spinner-circle')))
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, 'confirm-address'))).click()
#     WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, 'get-code'))).click()
#     print(browser.find_element(By.ID, 'result').text)



# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Поиск с динамическим обновлением результатов 🔍"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.7.2/index.html')
#     # class ="search-box"
#     # id="search-button"
#     # id="old-result"
#     # id="secret-button"
#
#     browser.find_element(By.CLASS_NAME, "search-box").send_keys('qwerty')
#     browser.find_element(By.ID, "search-button").click()
#     element = browser.find_element(By.ID, "old-result")
#     WebDriverWait(browser, 10).until(EC.staleness_of(element))
#     browser.find_element(By.ID, "secret-button").click()
#     print(browser.find_element(By.ID, 'result').text) # S34RCH-K3Y



# =======================================================

# тема 9  "Ожидания явные и неявные" задача: "Окно возможностей: лови момент! 🕰️"

# import time
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
#
# with webdriver.Chrome() as browser:
#     browser.get('https://parsinger.ru/selenium/9/9.7.3/index.html')
#     # button id="summonBtn"
#     # button id="passwordBtn"
#     browser.find_element(By.ID, "summonBtn").click()
#     WebDriverWait(browser, poll_frequency=0.01, timeout=25).until(EC.number_of_windows_to_be(5))
#     browser.find_element(By.ID, "passwordBtn").click()
#     time.sleep(2)
#     print(WebDriverWait(browser, 10).until(EC.alert_is_present()).text) # Поздравляем! Ваш пароль: X1Y0-A2B3-Z4XC

############################

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.ui import WebDriverWait
# import time
#
# with webdriver.Chrome() as br:
#     br.get('https://parsinger.ru/selenium/9/9.7.3/index.html')
#     time.sleep(1)  # для загрузки страницы
#
#     summon_button = br.find_element(By.ID, 'summonBtn')  # кнопка призыва страниц
#     password_button = br.find_element(By.ID, 'passwordBtn')  # кнопка для выдачи пароля
#
#     # ожидаем, пока количество страниц не будет равно 5
#     WebDriverWait(br, poll_frequency=0.1, timeout=10).until(EC.number_of_windows_to_be(5))
#
#     # кликаем для получения пароля
#     password_button.click()
#
#     # проверяем наличие alert-окна
#     WebDriverWait(br, 5).until(EC.alert_is_present())
#
#     # извлекаем и выводим пароль
#     password = br.switch_to.alert.text
#     print(password)


